<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="swift_ansible_playbooks">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Managing Rings Using Swift Playbooks</title>
  <body>
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section id="about">
      <p>The following table describes how playbooks relate to ring management.</p>
      <p>All of these playbooks will be run from the lifecycle manager from the
          <codeph>~/scratch/ansible/next/hos/ansible</codeph> directory.</p>
    </section>
    <section id="table">
      <table frame="all" rowsep="1" colsep="1" id="table_sg5_pjz_w5">
        <tgroup cols="3">
          <colspec colname="c1" colnum="1"/>
          <colspec colname="c2" colnum="2"/>
          <colspec colname="c3" colnum="3"/>
          <thead>
            <row>
              <entry>Playbook</entry>
              <entry>Description</entry>
              <entry>Notes</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><codeph>swift-update-from-model-rebalance-rings.yml</codeph></entry>
              <entry>There are two steps in this playbook:<ul id="ul_smp_ygy_4t">
                  <li>Make delta<p>It processes the input model and compares it against the existing
                      rings. After comparison, it produces a list of differences between the input
                      model and the existing rings. This is called the ring delta. The ring delta
                      covers drives being added, drives being removed, weight changes, and replica
                      count changes.</p></li>
                </ul><ul id="ul_xbm_2hy_4t">
                  <li>Rebalance<p>The ring delta is then converted into a series of commands (such
                      as <codeph>add</codeph>) to the swift-ring-builder program. Finally, the
                        <codeph>rebalance</codeph> command is issued to the swift-ring-builder
                      program.</p></li>
                </ul></entry>
              <entry>This playbook performs its actions on the first node running the swift-proxy
                service. (For more information, see <xref
                  href="../../troubleshooting/objectstorage/identify_ring_builder.dita"/>.) However, it
                also scans all Swift nodes to find the size of disk drives.<p>If there are no
                  changes in the ring delta, the <codeph>rebalance</codeph> command is still
                  executed to rebalance the rings. If <codeph>min-part-hours</codeph> has not yet
                  elapsed or if no partitions need to be moved, new rings are not
                written.</p></entry>
            </row>
            <row>
              <entry><codeph>swift-compare-model-rings.yml</codeph></entry>
              <entry>There are two steps in this playbook:<ul id="ul_qc2_b3y_4t">
                  <li>Make delta<p>This is the same as described for
                        <codeph>swift-make-delta-rebalance.yml</codeph>.</p></li>
                </ul><ul id="ul_ht2_f3y_4t">
                  <li>Report<p>This prints a summary of the proposed changes that will be made to
                      the rings (i.e., what would happen if you rebalanced).</p></li>
                </ul><p>The playbook reports any issues or problems it finds with the input
                  model.</p><p>This playbook can be useful to confirm that there are no errors in
                  the input model. It also allows you to check that when you change the input model,
                  that the proposed ring changes are as expected. For example, if you have added a
                  server to the input model, but this playbook reports that no drives are being
                  added, you should determine the cause.</p></entry>
              <entry/>
            </row>
            <row>
              <entry><codeph>swift-deploy.yml</codeph></entry>
              <entry><codeph>swift-deploy.yml</codeph> is responsible for installing software and
                configuring Swift on nodes. As part of installing and configuring, it runs the
                  <codeph>swift-update-from-model-rebalance-rings.yml</codeph> and
                  <codeph>swift-reconfigure.yml</codeph> playbooks.</entry>
              <entry>This playbook is included in the <codeph>hlm-deploy.yml</codeph> and
                  <codeph>site.yml</codeph> playbooks, so if you run either of those playbooks, the
                  <codeph>swift-deploy.yml</codeph> playbook is also run.</entry>
            </row>
            <row>
              <entry><codeph>swift-reconfigure.yml</codeph></entry>
              <entry>
                <p><codeph>swift-reconfigure.yml</codeph> takes rings that the
                    <codeph>swift-update-from-model-rebalance-rings.yml</codeph> playbook has
                  changed and copies those rings to all Swift nodes.</p>
              </entry>
              <entry>Every time that you directly use the
                  <codeph>swift-update-from-model-rebalance-rings.yml</codeph> playbook, you must
                copy these rings to the system using the <codeph>swift-reconfigure.yml</codeph>
                playbook. If you forget and run
                  <codeph>swift-update-from-model-rebalance-rings.yml</codeph> twice, the process
                may move two replicates of some partitions at the same time.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="variables">
      <title>Optional Ansible Variables Related to Ring Management</title>
      <p>The following optional variables may be specified when running the playbooks outlined
        above. They are specified using the <codeph>--extra-vars</codeph> option.</p>
      <table frame="all" rowsep="1" colsep="1" id="table_phb_ysg_1v">
        <tgroup cols="2">
          <colspec colname="c1" colnum="1"/>
          <colspec colname="c2" colnum="2"/>
          <thead>
            <row>
              <entry>Variable</entry>
              <entry>Description and Use</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><codeph>limit_ring</codeph></entry>
              <entry>Limit changes to the named ring. Other rings will not be examined or updated.
                This option may be used with any of the Swift playbooks. For example, to only update
                the <codeph>object-1</codeph> ring, use the following command:
                <codeblock>ansible-playbook -i hosts/verb_hosts swift-update-from-model-rebalance-rings.yml --extra-vars "limit-ring=object-1"</codeblock>
              </entry>
            </row>
            <row>
              <entry>drive_detail</entry>
              <entry>Used only with the swift-compare-model-rings.yml playbook. The playbook will
                include details of changes to every drive where the model and existing rings differ.
                If you omit the drive_detail variable, only summary information is provided. The
                following shows how to use the drive_detail
                variable:<codeblock>ansible-playbook -i hosts/verb_hosts swift-compare-model-rings.yml --extra-vars "drive_detail=yes"</codeblock></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </body>
</topic>
