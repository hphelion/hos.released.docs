<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="barbican">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Key Management with the Barbican Service</title>
  <body><!--not tested-->

  
  
  <ul>
    <li><xref href="#barbican/overview" format="dita">Barbican service overview</xref></li>
    <li><xref href="#barbican/installation" format="dita">Installation</xref>
        <ul>
          <li><xref href="#barbican/config" format="dita">Configuration</xref>
            <ul>
              <li><xref href="#barbican/kmip" format="dita">KMIP plug-in support</xref></li>
              <li><xref href="#barbican/auditing" format="dita">Auditing</xref></li>
            </ul>
          </li>
        </ul></li>
  </ul>
    
    <section id="overview"><title>Barbican service overview</title>
      <title/>
      <p><!--when upgrading to 3.0, use same services so barbican will not be added but in hos 3 barbian
        added, cinder if barbican is in input model, in input model by defaultrules have different
        names from upstream.--> Barbican is an OpenStack key management service offering secure
        storage, provisioning, and management of key data. The Barbican service provides management
        of secrets, keys and certificates via multiple storage back ends. The support for various
        back ends is provided via plug-ins e.g. Key Management Interoperability Protocol (KMIP) or
        (Public Key Cryptography Standards) PKCS11 hardware security module (HSM) plugins, Dogtag CA
        and KRA plug-ins. Barbican supports symmetric and asymmetric key generation using various
        algorithms. Barbican is new in this release. Cinder, neutron-lbaas v2 and Nova will
        integrate with Barbican for their encryption key generation and storage. Barbican has two
        types of core feature sets. </p>
      <ul><li>The Barbican component,  which exposes a REST API for secrets/containers/orders and is developed as a WSGI application.
        
      </li>
        <li>Barbican workers for asynchronous order processing (used for various
          messaging-event-driven tasks related to certificate generation). </li>
      </ul>
    
    
    </section>
    <section id="features"><title>Features and limitations</title>
      <ul>
      <li>Ability to encrypt volumes/disks. In an OpenStack context, this means support for
          encrypting Cinder volumes (Volume Encryption). Cinder has its own key manager interface
          (KeyMgr) and can use BarbicanClient as one of its implementations. KeyMgr encypts data in
          the virtualization host before writing data to the remote disk. There are three options
          available in <keyword keyref="kw-hos"/> <ul>
            <li>Tenant-based encryption for block volume storage using Barbican for KMS </li>
            <li>Barbican with KMIP and PKCS11 and external KMS (certified with HPE Atalla ESKM) </li>
            <li>3PAR StoreServ Data-At-Rest Encryption </li>
          </ul></li>
      <li>Encrypting container and objects on the server side </li><li>Storage and retrieval of secrets (passwords) </li><li>Certificate management for Load Balancer as a Service V2 (previously known as Neutron-LBaaS) </li><li>Ability to define and manage access policy for key material</li><li>Administrative functionality, ability to control the lifecycle of key material </li><li>Well-defined auditing capability in OpenStack services around key access and lifecycle events </li><li>Key management as mervice for PaaS application(s) deployed on OpenStack cloud</li><li>Ability to effectively scale up key management and be made highly available (handle
          failover)</li></ul>
        <note type="warning">Do not delete the certificate container associated with your load
        balancer listeners before deleting the load balancers themselves. If you delete the
        certificate first, future operations on your load balancers and failover will cease to
        function.</note>
      
      
    </section>
    <section id="installation"><title>Installation</title>
      <p>Barbican is an essential service in <keyword keyref="kw-hos"/> and is installed
        automatically. You should allow the installer to install Barbican using the default
        configuration, and customize later once your cloud is up and running. If you do make
        configuration changes, you will need to redeploy the service. Please refer to <xref
          href="barbican_admin.dita#barbicanAdmin/updating">Updating Barbican</xref> for more
        details on the available customization options. </p>
      <p id="config"><b>Configuration</b></p><p>Some Barbican features and service configurations
        can be changed. This is done using the HLM reconfigure Ansible playbook. For example, the
        log level can be changed from INFO to DEBUG and vice-versa. If needed, this change can be
        restricted to a set of nodes via the playbook's host limit option. </p>
      <p><b>Secret store back ends</b></p><p>Barbican currently supports database and KMIP as its
        secret store back ends. In OpenStack upstream, there are additional back ends available,
        such as the PKCS11 plugin and dogtag plugin which are currently not tested or supported by
        HPE Helion OpenStack. </p><p><b>Database plug-in for secret store</b></p><p>In HPE Helion
        Openstack, by default Barbican is configured to use a database as secret (keys) storage back
        end. This back end encrypts Barbican managed keys with a project level key (kek , key
        encryption key) before storing it in the database. And project-level keys are encrypted
        using a master key. As part of the initial Barbican configuration, you must generate and
        configure this master key.</p>
      <ol>
        <li>Generate the master key using the provided python *generate_kek* script on the lifecycle
          manager node:
          <codeblock>python  ~/helion/hos/ansible/roles/KEYMGR-API/templates/generate_kek</codeblock>The
          master key is generated at stdout from the command above.</li>
        <li>Set above master key in file:
          <codeblock>~/helion/hos/ansible/roles/barbican-common/vars/barbican_deploy_config.yml</codeblock></li>
        <li>Replace existing *barbican_customer_master_key* value with above generated master key if
          present.</li>
        <li>Commit the change to the git repository:
          <codeblock>cp -r ~/hp-ci/padawan/* ~/helion/my_cloud/definition/
cd ~/helion
git add -A
git commit -m "My config"</codeblock></li>
        <li>Next, run ready-deloyment:
          <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
        <li>Once the master key is set, continue with your cloud deployment.</li>
      </ol>
      <note>For a Barbican deployment with a database back end, the master key needs to be generated
        and configured before Barbican is deployed for the first time. Once the master key is set,
        it must not be modified.</note>
      <note>Changing the master key can result in read errors for existing secrets as those secrets
        are stored in the database and are encrypted using the previous master key. Once a new
        master key is used, Barbican will not be able to read those secrets. Also it will not be
        able to create new secrets within that project as the project key is encrypted using
        previous master key.</note>
      <p id="kmip"><b>KMIP plug-in support</b></p><p>Barbican has a KMIP plug-in to store encryption
        keys (called secrets in Barbican service terminology) in an HSM device using KMIP protocol.
        In HOS, we tested this plug-in against Atalla ESKM with KMIP server. To enable its support,
        Barbican needs to be configured with corresponding plug-in, connection details and client
        certificates information needs to be defined in its configuration. ESKM KMIP server uses
        client certificate to validate KMIP client connection established by Barbican server. As
        part of that KMIP configuration, playbooks provide mechanism to upload customer provided
        client certs to nodes hosting Barbican API server. </p>
      <note>The Installation and deployment of the Atalla ESKM or any other HSM devices and
        dependent components is out of scope for this document. Client should refer the relevant
        documentations on the given product site. For example, you can get more information on
        Atalla ESKM and related Data Security and Encryption Products at
        http://www8.hp.com/us/en/software-solutions/data-security-encryption/. </note>
      <p id="auditing"><b>Auditing</b></p><p>Barbican is one of the services in HOS 3.0 which has
        added support for auditing. It uses Openstack <xref href="middleware_auditing.dita#auditing"
          >Audit Middleware </xref> to generate auditing data in Cloud Auditing Data Federation
        (CADF) format. HLM input model has the mechanism to enable / disable per service auditing
        support. When Barbican auditing is enabled, service writes audit messages to audit log file,
        different from service own logging. The base location of audit log file is driven by common
        auditing configuration.</p>
      <p>The auditing feature can be enabled and disabled thorough the particular service's
        reconfigure playbook. As part of a service's configuration, its audit messages can be
        directed to a log or to a messaging queue. By default, messages are written to the service's
        log file. Once an architecture-level decision is made with regards to the default consumer
        of audit events (that is, either the log or messaging), the Barbican service can configure
        that as the default option when auditing is enabled. </p> Auditing can be disabled or
      enabled by following these steps on deployer node. <ol>
        <li>Edit the file ~/helion/my_cloud/definition/cloudConfig.yml. Note that all audit-related
          configuration is defined under the audit-settings section. Please note that you must use
          valid yaml syntax when specifying values.</li>
        <li>A service name defined under enabled-services or disabled-services will override the
          default setting (i.e. default: enabled or default: disabled) To enable auditing, make sure
          that the Barbican service name is within the enabled-services list of the audit-settings
          section or is not present in disabled-services list when default: is set to enabled. Below
          is the relevant section of cloudConfig.yml. Note that enabled-services are commented out.
          The 'default: enabled' setting covers all services. If you then want to disable (or enable
          a few, whichever is the opposite of the default global setting you used) you can do so in
          a disabled-services (or the opposite, enabled-services) section below it. Here
          enabled-serivces is commented out and you should only have either a default of enabled (or
          disabled) or a section of disabled (or enabled). In other words, there is no need to
          repeat the
          setting.<codeblock>audit-settings:
            audit-dir: /var/audit
            default: enabled
            #enabled-services:
            #  - keystone
            #  - barbican
            disabled-services:
            - nova
            - barbican
            - keystone
            - cinder
            - ceilometer
            - neutron</codeblock>
        </li>
        <li>Once you are satisfied with your settings, copy the files to
          ~/helion/my_cloud/definition/, and commit the changes in the git repository.
          <codeblock>cp -r ~/hp-ci/padawan/* ~/helion/my_cloud/definition/
cd ~/helion
git add -A
git commit -m "My config"</codeblock></li>
        <li>Then run the configuration processor and ready-deployment:
          <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost config-processor-run.yml
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
        <li>Finally, run barbican-reconfigure:
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts barbican-reconfigure.yml</codeblock>
        </li>
      </ol>
    </section>
  </body>
</topic>
