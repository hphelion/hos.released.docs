<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_rqy_dfm_gv">
  <title>Data at Rest Encryption</title>
  <body>    <p conkeyref="HOS-conrefs/applies-to"/>
    <section> THIS DOCUMENT IS MERELY A POUR OF THE WIKI AND NEEDS MUCH WORK BEFORE USE OR
      PUBLISHING</section>
    <section>This section describes the data-at-rest encryption model available in <keyword
        keyref="kw-hos"/>.<p>The Cinder block storage service will request the creation and
        attachment of encrypted storage volumes. These volumes are protected with an encryption key
        that may be stored in a hardware security module (HSM) appliance. The Barbican service
        supports two methods to store encryption keys: a native database back end and an HSM device
        (KMIP + Atalla ESKM).</p>
      <p>The back ends can be configured as described below.</p>
      <ul>
        <li>Native database: This is the default configuration in <keyword keyref="kw-hos"/>. </li>
        <li>KMIP + Atalla ESKM: Access details for your HSM appliance are to be used in steps below.
            <p> After successful configuration, you should now see Barbican make requests of the HSM
            for key material as needed. You can also confirm key operations are going to your HSM
            via its admin portal. </p></li>
      </ul>
      <p><b>KMIP + Atalla ESKM configuration</b></p>
      <ol>
        <li>Copy KMIP plugin certs. On the lifecycle manager node:
          <codeblock>stack@localhost:~$ cd ~/stack/scratch/ansible/next/hos/ansible
stack@localhost:~$ ansible-playbook  -i hosts/verb_hosts barbican-reconfigure.yml -e@/tmp/kmip_plugin_certs.yml</codeblock>
          Enable KMIP plugin:
          <codeblock>stack@localhost:~$ vi ~/helion/hos/ansible/roles/barbican-common/vars/barbican_deploy_config.yml</codeblock></li>
        <li>Change the value of <codeph>use_kmip_secretstore_plugin</codeph> to True to use the KMIP plugin or False to
          use the default secret store plugin (store_crypto). </li>
        <li>Provide KMIP client connection credentials and KMIP server hostname and port:
          <codeblock>barbican_kmip_username: 'hlm_barbican'
barbican_kmip_password: 'openstack'
barbican_kmip_port: 5696
barbican_kmip_host : 16.103.18.54</codeblock>
        </li>
        <li>Commit the change in the git repository:
          <codeblock>stack@localhost:~$ git add -A
stack@localhost:~$ git commit -m 'Enable KMIP'
stack@localhost:~$ cd ~/helion/hos/ansible/
stack@localhost:~$ ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
        </li>
        <li>Run reconfiguration playbook in deployment area:
          <codeblock>stack@localhost:~$ cd ~/scratch/ansible/next/hos/ansible
stack@localhost:~$ ansible-playbook -i hosts/verb_hosts barbican-reconfigure.yml</codeblock>
        </li>
      </ol>
      <p><b>Usage Examples</b></p>
      <ol>
        <li>Now that Barbican and Cinder services are installed, you need to configure a Cinder
          volume type for encryption. This will create a new Cinder volume type "LUKS" (Linux
          Unified Key Setup) that can be selected when creating a new volume. Such volumes will be
          encrypted with a 512bit AES key: <codeblock>stack@localhost:~$ cinder --os-username admin --os-password openstack type-­create LUKS
stack@localhost:~$ cinder --os­username admin --os­password openstack encryption-type-create \
                   --cipher aes-xts-plain64 --key_size 512 --control_location \ 
                   front-end LUKS nova.volume.encryptors.luks.LuksEncryptor</codeblock>
          <codeblock>+--------------------------------------+-------------------------------------------+-----------------+----------+------------------+
|            Volume Type ID            |                  Provider                 |      Cipher     | Key Size | Control Location |
+--------------------------------------+-------------------------------------------+-----------------+----------+------------------+
| 99ed804b-7ed9-41a5-9c5e-e2002e9f9bb4 | nova.volume.encryptors.luks.LuksEncryptor | aes-xts-plain64 |   512    |    front-end     |
+--------------------------------------+-------------------------------------------+-----------------+----------+------------------+</codeblock>
        </li>
        <li>You can now create a new volume with the type LUKS. This will initiate a request for a
          new key from Barbican. Once created you can attach the new volume to an instance.
          <codeblock>stack@localhost:~$ cinder create --display-name testVolumeEncrypted --volume-type LUKS --availability-zone nova 1</codeblock>
        </li>
        <li>The volume list should now show that you have a new volume and that it is encrypted. Run
          cinder show with the volume
          ID:<codeblock>stack@localhost:~$ cinder show 2ebf610b-98bf-4914-aee1-9b866d7b1897</codeblock>
          Here is the
          output:<codeblock>+---------------------------------------+--------------------------------------+
|                Property               |                Value                 |
+---------------------------------------+--------------------------------------+
|              attachments              |                  []                  |
|           availability_zone           |                 nova                 |
|                bootable               |                false                 |
|          consistencygroup_id          |                 None                 |
|               created_at              |      2016-03-04T00:17:45.000000      |
|              description              |                 None                 |
|               encrypted               |                 True                 |
|                   id                  | 2ebf610b-98bf-4914-aee1-9b866d7b1897 |
|                metadata               |                  {}                  |
|            migration_status           |                 None                 |
|              multiattach              |                False                 |
|                  name                 |         testVolumeEncrypted          |
|         os-vol-host-attr:host         |  ha-volume-manager@lvm-1#LVM_iSCSI   |
|     os-vol-mig-status-attr:migstat    |                 None                 |
|     os-vol-mig-status-attr:name_id    |                 None                 |
|      os-vol-tenant-attr:tenant_id     |   5f3b093c603f4dc8bc377d04e5385d42   |
|   os-volume-replication:driver_data   |                 None                 |
| os-volume-replication:extended_status |                 None                 |
|           replication_status          |               disabled               |
|                  size                 |                  1                   |
|              snapshot_id              |                 None                 |
|              source_volid             |                 None                 |
|                 status                |              available               |
|                user_id                |   3bdde5491e174a8aafcbc5a88e01cac7   |
|              volume_type              |                 LUKS                 |
+---------------------------------------+--------------------------------------+</codeblock>
        </li>
        <li>When using an ESKM appliance for the back end, you can also confirm that key operations
          are going to your HSM via its admin portal
          by.….….….….….…...<codeblock>UUID                                    Owner             Object Type      State       Creation Date
8d54f41d-91dd-4f5e-bcfe-964af8213a8c    hlm_barbican     SymmetricKey     PreActive   2016-03-02 13:58:58</codeblock></li>
      </ol>
    </section>
  </body>
</topic>
