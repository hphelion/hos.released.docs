<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="configure_tls">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Configuring TLS for Public Endpoints</title>
  <body>
    <p conkeyref="HOS-conrefs/applies-to"/>
    <note type="attention">Hyperlinks intermittently do not work in the Google Chrome browser. <xref
        href="http://docs.hpcloud.com/helion/security/tls.html" scope="external" format="html">Click
        here</xref> for a frameless version of this page where the links should work.</note>
    <section id="about">
      <p outputclass="aTest">The Transport Layer Security (TLS) protocol, successor to SSL, provides
        the mechanisms to ensure authentication, non-repudiation, confidentiality, and integrity of
        user communications to the <keyword keyref="kw-hos"/> services from public endpoints.</p>
      <p>OpenStack endpoints are HTTP (REST) services providing APIs to other OpenStack services on
        the management network. All traffic to OpenStack services coming in on the public endpoints
        are secured using TLS connections.</p>
      <p>This document has the following sections:</p>
      <ul>
        <li><xref href="tls.dita#configure_tls/notes">Notes</xref></li>
        <li><xref href="tls.dita#configure_tls/selfsigned_cert">Creating a Self-Signed
            Certificate</xref></li>
        <li><xref href="tls.dita#configure_tls/install_cert">Installing Your SSL
          Certificate</xref></li>
        <li><xref href="tls.dita#configure_tls/renewal">Installing a Renewed Certificate</xref></li>
        <li><xref href="tls.dita#configure_tls/disable">Disabling TLS</xref></li>
        <li><xref href="tls.dita#configure_tls/configure_cipher">Configuring the Cipher Suite for
            Public Endpoints</xref></li>
      </ul>
    </section>
    <section id="notes"><title>Notes</title>
      <p>All of the <keyword keyref="kw-hos-phrase"/> example cloud models ship with TLS enabled on
        the public API endpoints. Because TLS is enabled by default, a test certificate is bundled
        with the release named <codeph>my-public-cert</codeph>. Having this default cert allows you
        to bring up a cloud without having to worry about certificates. It will not match the IP
        address of your environment's API endpoints, but you can ignore the warnings. Later, when
        you require a trusted certificate, you can add your own certificate and redeploy using the
        instructions below.</p>
      <p>Keystone currently doesn't support updating an endpoint. Therefore <b>the public endpoint
          cannot be changed after the initial deployment</b>. This has the following
        implications:</p>
      <ul>
        <li>TLS cannot be turned on/off after the initial deployment</li>
        <li>The public endpoint IP address or FQDN cannot be changed after deployment.</li>
      </ul>
      <p>Therefore, you will have to make one of the following choices during the installation phase
        of your deployment:</p>
      <ul>
        <li>Comment out the <codeph>external-name:</codeph> line in
            <codeph>~/helion/my_cloud/definition/data/network_groups.yml</codeph> if you want to use
          the IP addresses generated by the configuration processor for your API endpoints.</li>
        <li>Assign a hostname that is resolvable within your environment to the
            <codeph>external-name:</codeph> line in
            <codeph>~/helion/my_cloud/definition/data/network_groups.yml</codeph> which will enable
          you to use a FQDN for your API endpoints.</li>
      </ul>
      <p>You also need to choose if you want TLS on or off. We recommend keeping TLS on by default
        as it cannot be changed. But if you want it disabled you need to change "tls-components" to
        "components" in <codeph>network_groups.yml</codeph> and comment out the cert-file.</p>
      <p>For more details about how this works, see <xref
          href="../input_model.dita#input_model/co_networkgroups">Input Model - Network
          Groups</xref> and <xref
          href="../example_configurations.dita#example_configurations/networkgroups">Example
          Configurations - Network_groups.yml</xref></p>
    </section>
    <section id="selfsigned_cert">
      <title>Creating a Self-Signed Certificate</title>
      <p>If you want to install a self-signed certificate for testing purposes that meets the needs
        of <keyword keyref="kw-hos"/> and HPE Helion Development Platform, follow these steps to
        create the cert, and then install it by following the installation in the next section.</p>
      <note type="important">Self-signed certificates should not be used in a production
        environment, they are meant for testing only.</note>
      <p>The domain name in the certificate signing request in step 1 below and the DNS entry in
        step 2 must match, although the domain does not have to exist.</p>
      <p>In step 2 you need the same IP address listed for both the DNS and the IP entries. The IP
        address is what is used by HPE Helion Development Platform and the DNS is used by <keyword
          keyref="kw-hos"/>. Note that as you examine the certificate output, the issuer will match
        the subject because the cert is self-signed. The requirement for the DNS entry stems from a
        low-level Python bug.</p>
      <p>The example below shows you how to create a self-signed certificate named
          <codeph>my-public-cert</codeph>:</p>
      <ol>
        <li>Create a Certificate Signing Request (CSR) with a defined subject:
          <codeblock>openssl req -nodes -newkey rsa:2048 -keyout my-public-cert.key -out my-public-cert.csr -text \
-subj '/C=US/O=Helion Test Certificate/CN=your.domain.com/emailAddress=test@ficticious.org/'</codeblock>
        </li>
        <li>Create a file containing v3 extensions Ensure that the DNS entry matches any CN entry
          above and provide your IP
          <codeblock>cat > v3_ext.cnf &lt;&lt; *EOF*
[ v3_req ]
subjectAltName=DNS:your.domain.com,DNS:10.0.0.1, IP:10.0.0.1
*EOF*</codeblock>
        </li>
        <li>Self-sign your certificate
          <codeblock>openssl x509 â€“days 365 -extfile v3_ext.cnf -extensions v3_req -in my-public-cert.csr -signkey my-public-cert.key -req -text -out my-public-cert.crt</codeblock>
        </li>
        <li>You will need to combine the contents of the <codeph>my-public-cert.key</codeph> and
            <codeph>my-public-cert.crt</codeph> files into a single file prior to copying that file
          into your <codeph>~/helion/my_cloud/config/tls/certs/</codeph> in the steps in the next
          section.</li>
      </ol>
    </section>
    <section id="install_cert"><title>Installing Your SSL Certificate</title>
      <p><b>Pre-requisites</b></p>
      <p>These steps assume you have already created or obtained a valid SSL certificate for your
        environment that references either the FQDN you chose or the IP address for the public API
        endpoint noted in your <codeph>~/helion/my_cloud/info/address_info.yml</codeph> file.</p>
      <p><b>Specifying Your Certificate in the Input Model</b></p>
      <p>Follow the steps below to specify the certificate in the input files:</p>
      <ol>
        <li>Log in to the lifecycle manager.</li>
        <li>Copy the certificate (containing both public and private keys) to the
            <codeph>~/helion/my_cloud/config/tls/certs/</codeph> directory.</li>
        <li id="private1">Replace the contents of
            <codeph>~/helion/hos/ansible/roles/tls-trust/files/frontend_cacert.pem</codeph> with the
          new CA certificate chain file that you added in the previous step.</li>
        <li>Edit <codeph>~/helion/my_cloud/definition/data/network_groups.yml</codeph> and set the
          values for <codeph>external-name</codeph> and <codeph>cert-file</codeph> to match the
          values for your environment. <p>If you are using IP addresses only then you will comment
            out the <codeph>external-name</codeph> value. Example:</p>
          <codeblock>
  - name: EXTERNAL-API
    hostname-suffix: extapi
            
    load-balancers:
       - provider: ip-cluster
         name: extlb
         # If external-name is set then public urls in keystone
         # will use this name instead of the IP address
         # You must either set this to a name that can be resolved in your network
         # or comment out this line to use IP addresses
         <b>#external-name:</b>

         tls-components:
            - default
         roles:
            - public
         <b>cert-file: &lt;cert-name></b></codeblock>
          <p>If you are using a FQDN then you will specify that in the
              <codeph>external-name</codeph> value, ensuring it matches the FQDN you used when
            creating your certificate. Example:</p>
          <codeblock>
  - name: EXTERNAL-API
    hostname-suffix: extapi
        
    load-balancers:
       - provider: ip-cluster
         name: extlb
         # If external-name is set then public urls in keystone
         # will use this name instead of the IP address
         # You must either set this to a name that can be resolved in your network
         # or comment out this line to use IP addresses
         <b>external-name: &lt;FQDN></b>
            
         tls-components:
            - default
         roles:
            - public
         <b>cert-file: &lt;cert-name></b></codeblock></li>
      </ol>
      <note>Do not enable TLS on the internal load balancer.</note>
      <p><b>Definitions</b></p>
      <dl>
        <dlentry>
          <dt>name: extlb</dt>
          <dd>The external load balancer</dd>
        </dlentry>
        <dlentry>
          <dt>external-name:</dt>
          <dd>This name will be used in place of the external VIP address. This name can be an FQDN.
            This will be registered in the public endpoints of the services. As noted above,
              <codeph>myhelion.test</codeph> should be changed to your FQDN.</dd>
        </dlentry>
        <dlentry>
          <dt>tls-components:</dt>
          <dd>This list of services will be put behind TLS. Note this is only being done for the
            load balancer in question, which is the external load balancer. The components in
            'default' are those services defined under service-components in
              <codeph>~/helion/my_cloud/definition/data/control_plane.yml</codeph>. If you want to
            have a finer granularity, you can replace default with a list of individual components,
            such as: <codeblock>tls-components: - 'horizon' </codeblock></dd>
        </dlentry>
        <dlentry>
          <dt>cert-file:</dt>
          <dd>The default <codeph>my-public-cert</codeph> is already part of the playbook but you
            can specify your own name. When you specify your own you also need to have the
            certificate copied in <codeph>~/helion/my_cloud/config/tls/certs</codeph> on the
            lifecycle manager, as noted above.</dd>
        </dlentry>
      </dl>
      <p><b>Deploy Your Certificate</b></p>
      <ol>
        <li>Commit your changes to git:
          <codeblock>cd ~/helion/hos/ansible
git add -A
git commit -m "My config or other commit message"</codeblock></li>
        <li>Run the configuration processor:
          <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock></li>
        <li>At this point if you are doing this during the initial installation prior to your first
          run of the <codeph>site.yml</codeph> playbook then you should just continue on with the
          installation instructions. However, if you are changing or adding a new certificate
          post-installation then proceed to the next steps.</li>
        <li>Create the deployment directory:
          <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
        <li>Complete the deployment of your certificate by running the playbooks below. <p>To deploy
            the new certificate:</p>
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts FND-CLU-deploy.yml</codeblock>
          <p>To deploy the CA chain:</p>
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts horizon-deploy.yml</codeblock></li>
        <li>If you have utilized a FQDN for your public Identity endpoint, you will need to
          reconfigure the Nova service using the playbook below to ensure that the VNC proxy system
          picks up this change:
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts nova-reconfigure.yml</codeblock></li>
      </ol>
      <p>Note that the certificate that is installed by default, "my-public-cert", is linked to the
        name "myhelion.test". It is possible to deploy the system without generating or configuring
        a new certificate and come back and change it later, but access to the public URLS will have
        to use the "--insecure" flag to avoid "certificate mismatch" errors.</p>
    </section>

    <section id="renewal"><title>Installing a Renewed Certificate</title>
      <p>If you previously installed a certificate that has now expired and need to install your
        renewed certificate, these steps will show you how.</p>
      <ol>
        <li>Log in to the lifecycle manager.</li>
        <li>Copy the new certificate (containing both public and private keys) to the
            <codeph>~/helion/my_cloud/config/tls/certs/</codeph> directory.</li>
        <li>Replace the contents of
            <codeph>~/helion/hos/ansible/roles/tls-trust/files/frontend_cacert.pem</codeph> with the
          new CA certificate chain file that you added in the previous step.</li>
        <li>If your renewed certificate has the same name as your previous certificate then skip to
          the next step. However, if your renewed certificate has a new name then you will need to
          update your <codeph>~/helion/my_cloud/definition/data/network_groups.yml</codeph> file
          with the new information. See the <xref href="tls.dita#configure_tls/install_cert"
            >Installing Your SSL Certificate</xref> section above for more details.</li>
        <li>Once that is complete you can then deploy your renewed certificate: <ol>
            <li>Commit your changes to git:
              <codeblock>cd ~/helion/hos/ansible
git add -A
git commit -m "My config or other commit message"</codeblock></li>
            <li>Run the configuration processor:
              <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock></li>
            <li>Create the deployment directory:
              <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
            <li>Complete the deployment of your certificate by running the playbooks below. <p>To
                deploy the new certificate:</p>
              <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts FND-CLU-deploy.yml</codeblock>
              <p>To deploy the CA chain:</p>
              <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts horizon-deploy.yml</codeblock></li>
          </ol>
        </li>
      </ol>
    </section>

    <section id="disable"><title>Disabling TLS</title>
      <p>If you don't want to use TLS, then you should change "tls-components" to "components" in
          <codeph>network_groups.yml</codeph>. Additionally, if you have a
          <codeph>network_groups.yml</codeph> file from a previous installation, you won't have TLS
        enabled unless you change "components" to "tls-components" in that file.</p>
    </section>

    <section id="configure_cipher">
      <title>Configuring the Cipher Suite for Public Endpoints</title>
      <p>We have set the default cipher suite to be: <codeph>HIGH:!aNULL:!eNULL:!DES:!3DES</codeph>.
        This is a recommended setting from the <xref
          href="http://docs.openstack.org/security-guide/secure-communication/introduction-to-ssl-and-tls.html"
          format="html" scope="external">OpenStack documentation site</xref>. You may override this.
        To do so, open <codeph>config/haproxy/defaults.yml</codeph> and edit it. The parameters can
        be found under haproxy_globals list.</p>
      <codeblock>- "ssl-default-bind-ciphers HIGH:!aNULL:!eNULL:!DES:!3DES"
- "ssl-default-server-ciphers HIGH:!aNULL:!eNULL:!DES:!3DES"</codeblock>
      <p>Make the changes as needed. It's best to keep the two options identical.</p>
    </section>
    <!--
    <section id="rfcs"><title>Critical Standards for Certificates in Production Environments</title>
      
      <note type="warning">TLS certificates must adhere to the current <xref
        href="https://cabforum.org/wp-content/uploads/Baseline_Requirements_V1_3_1.pdf"
        format="pdf" scope="external">Baseline Requirements</xref>. Furthermore, due to a known
        limitation in the Python codebase, you must ensure the following standards are met:<dl>
          <dlentry>
            <dt>If Using IP Addresses</dt>
            <dd>The Common Name attribute (<codeph>commonName</codeph>) <xref
              href="https://cabforum.org/wp-content/uploads/Baseline_Requirements_V1_3_1.pdf"
              format="pdf" scope="external">has been deprecated</xref> and it is recommended that
              you do not use it.</dd>
            <dd>The Common Name attribute must not contain an IP address per <xref
              href="https://tools.ietf.org/html/rfc2818" format="html" scope="external">RFC
              2818</xref>.</dd>
            <dd>Create an <codeph>IP Address</codeph> alternative name entry
              (<codeph>SubjectAltName</codeph>) attribute that contains the IP address.</dd>
            <dd>Create an additional <codeph>DNS</codeph> alternative name entry attribute that
              contains the same IP address. </dd>
            <dd>Example:
              <codeblock>X509v3 Subject Alternative Name:
DNS:servername-api.ftc.hp.com, DNS:10.241.20.5, IP Address:10.241.20.5</codeblock></dd>
          </dlentry>
          <dlentry>
            <dt>If Using DNS/FQDN</dt>
            <dd>The Common Name attribute (<codeph>commonName</codeph>) has been deprecated and it
              is recommended that you do not use it. The Common Name attribute must not contain an
              IP address per <xref href="https://tools.ietf.org/html/rfc2818" format="html"
                scope="external">RFC 2818</xref>.</dd>
            <dd>If the Common Name attribute is specified, there must also be an alternative name
              entry specified which contains the DNS information. (At least one Subject Alternative
              Name (<codeph>subjectAltName</codeph>) extension attributes must be specified, or some
              services will fail to install or to function.)</dd>
            <dd>
              <codeblock>CN=servername-api.ftc.hp.com/emailAddress=email-address@hp.com
X509v3 Subject Alternative Name:
DNS:servername-api.ftc.hp.com</codeblock>
            </dd>
          </dlentry>
        </dl></note><p>You must also supply the name of a certificate file that matches your choice
          above. If you are using IP addresses, you won't know the IP address until after the config
          processor has run, but you can obtain it after running the config processor and before
          deployment. </p>
      
      
    </section>-->
    <!--
    <section><title>Creating a test certificate for an IP address or FQDN</title> If you want to
      create a test certificate, follow tese steps: <ol>
        <li>First get the IP address or FQDN your public endpoint is bound to. </li>
        <li>you need to get the following files and run a script. <ul>
            <li>cacert.pem </li>
            <li>cakey.pem </li>
            <li>openssl.cnf </li>
            <li>hlm_cert_generate.sh</li>
          </ul>
        </li>
        <li> Then run <codeblock>bash hlm_cert_generate.sh &lt;public VIP address></codeblock> or
          <codeblock>bash hlm_cert_generate.sh &lt;public FQDN></codeblock>
        </li>
      </ol>
      <codeph>Installing the new certificate into a running cloud</codeph>
      <ol>
        <li>Copy the generated my-public-cert to <codeph>~/helion/my_cloud/config/tls/certs/</codeph>
        </li>
        <li>Commit the changes, run the config processor and deploy cluster playbook.
          <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-clean.yml</codeblock>
        </li>
        <li>Commit your changes to git.
          <codeblock>cd ~/helion/hos/ansible
git add -A
git commit -m "My config or other commit message"</codeblock>
        </li>
        <li>Rerun the config processor
          <codeblock>ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock>
        </li>
        <li>Deploy the cluster to refresh the certificate
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts FND-CLU-deploy.yml</codeblock>
        </li>
      </ol>  
    </section>-->






    <!--<section><title>Accessing public endpoints from an external machine</title>
      <ol id="ol_q1b_djg_rt">
        <li>Have a name resolver for myhelion.test - It could /etc/hosts or dnsmasq reading from a
          hosts file </li>
        <li>Install the CA certificate that signed the test server certificate. This file can be
          found in the lifecycle manager under <codeph>roles/tls-trust/files/frontend_cacert.pem</codeph>. </li>
        <li>Make an entry for the VIP inside the /etc/hosts file pointing to myhelion.test </li>
        <li>Run the playbook below to install the certificate.
          <codeblock>ansible-playbook -i hosts/verb_hosts tls-trust-deploy.yml</codeblock></li>
      </ol></section>-->
    <!--
    <section><title>Testing public endpoints using the test certificate with a virtual cloud</title>
      The following write up is for people trying to test the public endpoints using the bundled
      test certificate with a virtual cloud. There are three use cases here. <ul id="ul_z51_djg_rt">
        <li>Access public endpoints from the lifecycle manager </li>
        <li>Access public endpoints from the machine hosting the virtual cloud </li>
        <li>Access public endpoints from a machine other than the machine hosting the virtual cloud
        </li>
      </ul>All these cases reduce to the following steps <ol id="ol_ay1_djg_rt">
        <li>Have a name resolver for myhelion.test - It could /etc/hosts or dnsmasq reading from a
          hosts file </li>
        <li>Install the CA certificate that signed the test server certificate. This file can be
          found in the lifecycle manager under <codeph>roles/tls-trust/files/frontend_cacert.pem</codeph>. This file is
          not symlinked via the config directory to customers because we generally don't need the CA
          certificate signing the external certificate inside the cloud. </li>
      </ol>
   
      <codeph>Accessing public endpoints from the machine hosting the virtual cloud</codeph>
      <ol id="ol_ddb_djg_rt">
        <li>Make an entry for the VIP inside the /etc/hosts file pointing to myhelion.test </li>
        <li>Copy the CA certificate from the
          lifecycle manager:/home/stack/scratch/ansible/next/hos/ansible/roles/tls-trust/files/frontend_cacert.pem
          to /usr/local/share/ca-certificates/helion-ca.crt </li>
        <li>Run <codeblock>sudo update-ca-certificates - -fresh</codeblock></li>
      </ol>
      
    </section>
    <section><title><codeph>Accessing public endpoints from a machine other than the machine hosting the virtual
      cloud</codeph></title>Start by repeating what was done for the machine hosting the virtual cloud. But this
      time your /etc/hosts entry for myhelion.test should point to the IP address of the host
      running the virtual cloud. After this you need to have something tunnelling the packets to the
      VIP. This is easily accomplished with haproxy in tunnel mode. (mode tcp). But you need to have
      a stanza for every open port. But the stanzas are quite generic and can be scripted. For
      example if I want to do 'nova list' I may need port 5000 (keystone) and port 8774 (nova-api),
        <ol id="ol_ofb_djg_rt">
        <li>Install haproxy with apt-get </li>
        <li>Open<codeph> /etc/haproxy/haproxy.cfg</codeph> and append the following sections to the existing
          content:
          <codeblock>listen keystone-5000
      option ssl-hello-chk
      mode tcp
      bind 16.25.10.10:5000
      server keystone-5000 192.168.245.10:5000 check inter 2000 rise 2 fall 5
      listen nova-8774
      option ssl-hello-chk
      mode tcp
      bind 16.25.10.10:8774
      server nova-8774 192.168.245.10:8774 check inter 2000 rise 2 fall 5
      
      16.25.10.10 is the host running the virtual cloud
      192.168.254.10 is the VIP</codeblock></li>
      </ol> One way to generate the list of all public ports behind TLS is to run 'grep "ssl crt"
      /etc/haproxy/haproxy.cfg' from a controller. </section>-->
  </body>
</topic>
