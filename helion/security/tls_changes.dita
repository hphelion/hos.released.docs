<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="tls30">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Changes to TLS</title>
  <body>
    
    
    
    
    
    <section><title>  Changes from HPE Helion OpenStack 2.x</title> <ul>   <li>API endpoints in the internal and admin VIPs can now be secured by TLS.
    </li><li>Barbican-api can be secured by TLS from the loadbalancer to service endpoint.
    </li><li>Customers can add multiple trust chains (CA certificates)
    </li></ul>
       
      Current Status:
      <ul> <li>All API services are behind TLS
     
      </li><li>TLS can be turned off/on.
      </li></ul>
    </section>
    <section><title>Enabling TLS in the input model</title>All changes will go into the following
      file: data/network_groups.yml: TLS for the internal and admin Loadbalancer load-balancers:
      <codeblock>- provider: ip-cluster
        name: lb
        tls-components:
        - default
        components:
        # These services do not currently support TLS
        - vertica
        - rabbitmq
        - mysql
        - nova-metadata
        roles:
        - internal
        - admin
        cert-file: helion-internal-cert
        # The helion-internal-cert is a reserved name and
        # this certificate will be autogenerated. Customer
        # can bring in their own cert with a different name
        
        # cert-file: customer-provided-internal-cert
        
        # and replace this with name of file in "config/tls/certs/".
        
        # The configuration-processor will also create a request templates for each
        # named certificates under
        # "info/cert_reqs/"
        #
        # And this will be of the form
        #
        # info/cert_reqs/customer-provided-internal-cert
        
        #
        # These request templates contain the subject Alt-names that
        # the certificates need. A customer can add to this template
        # before generating their Certificate Signing Request (CSR).
        # They would then send the CSR to their CA to be signed and
        # receive the certificate, which can then be dropped into
        # "config/tls/certs".
        #
        # When you bring in your own certificate you may want to bring
        # in the trust chains (or CA certificate) for this certificate.
        # This is usually not required if the CA is a public signer that
        # gets bundled by the system. However, we suggest you include it
        # into HOS anyway by copying the file into the directory
        # "config/cacerts/".
        # Note that the file extension should be .crt or it will not
        # be processed by HOS.
        # </codeblock>
    </section>
    
    <section><title>TLS for Barbican on the Loadbalancer backend and service endpoint</title>
      
      <codeblock>- name: MANAGEMENT
        hostname-suffix: mgmt
        hostname: true
        
        tls-component-endpoints:
        # The following service endpoint is behind TLS
        - barbican-api
        component-endpoints:
        - default </codeblock>
      
    </section>
    
    
    <section><title>User-provided Certificates and Trust Chains</title> HOS generates its own
      internal certificates but is designed to allow you to bring in your own certificates for the
      VIPs. Here is the general process. <ol>
        <li>You must have a server certificate and a CA certificate to go with it (unless the signer
          is a public CA and it's already bundled with most distributions). </li>
        <li>You must decide the names of the server certificates and configure the network_groups in
          the input model such that each Loadbalancer provider has at least one cert-name associated
          with it. </li>
        <li>Run the config processor. Note that you may or may not have the certificate file at this
          point. The config processor would create certificate request file artefacts under
          info/cert_reqs/ for each of the cert-name(s) in the network_groups. While there's no
          special reason to use the request file created for an external endpoint VIP certificate,
          it is important to use the request files created for internal certificates since the
          canonical names for the internal VIP can be many and service specific and each of these
          need to be in the Subject Alt Names attribute of the certificate. </li>
        <li>Create a Certificate Signing Request for this request file and send it to the company
          internal CA or a public CA to get it certified and issued with a certificate. The customer
          will now be in the possession of a server certificate and possibly a trust chain or CA
          certificate. </li>
        <li>Next, input it into the lifecycle manager: Server certificates can be dropped into
          config/tls/certs CA certificates can be dropped into config/tls/cacerts. The file
          extension should be .crt for the CA certificate to be processed by HOS. Visit this page
          for a working example: <xref href="generate_own_certs.dita#tls30"/></li>
      </ol></section>
    <section><title>Testing</title> Checking if an endpoint is behind TLS The following command
      probes a keystone endpoint that's behind TLS
      <codeblock>stack@deployerincloud-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.5:5000 | openssl x509 -fingerprint -noout 
        depth=0 CN = helion-vip
        verify error:num=20:unable to get local issuer certificate
        verify return:1
        depth=0 CN = helion-vip
        verify error:num=27:certificate not trusted
        verify return:1
        depth=0 CN = helion-vip
        verify error:num=21:unable to verify the first certificate
        verify return:1
        DONE
        SHA1 Fingerprint=C6:46:1E:59:C6:11:BF:72:5E:DD:FC:FF:B0:66:A7:A2:CC:32:1C:B8 </codeblock>
      The next command probes a mysql endpoint that is not behind TLS
      <codeblock>stack@deployerincloud-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.5:3306 | openssl x509 -fingerprint -noout 
        140448358213264:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:s23_clnt.c:795:
        unable to load certificate
        140454148159120:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:703:Expecting: TRUSTED CERTIFICATE</codeblock>
    </section>
    <section><title>Checking if the trust chain is correctly deployed</title>
      <codeblock>stack@padawan-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.9:5000 2>/dev/null | grep code 
        Verify return code: 21 (unable to verify the first certificate)
stack@padawan-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.9:5000 -CAfile /usr/local/share/ca-certificates/helion_frontend_cacert.crt 2>/dev/null | grep code 
        Verify return code: 0 (ok) </codeblock>
      The first command shows error 21 which is then fixed by providing the CA certificate file.
      This verifies that the CA certificate matches the server certificate. </section>
    <section><title>Turning TLS on/off</title> Using an example input-model would enable all
      supported TLS services before deploy. But if you want to change this setting afterwards, you
      can change the input model and reconfigure the system. The sequence would be: <ol>
        <li>Change the input model </li>
        <li>Commit the changes to source control </li>
        <li>Run ready-deployment playbook </li>
        <li>Run hlm-reconfigure playbook </li>
      </ol> The commands could be:
      <codeblock>cd ~/helion
git add -A
git commit -m "TLS change"
cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost config-processor-run.yml -e encrypt="" -e rekey=""
        
ansible-playbook -i hosts/localhost ready-deployment.yml
cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts hlm-reconfigure.yml </codeblock>Note:
      If you run into some issues with hlm-reconfigure (this is possible since hlm-reconfigure is
      quite new and some services may have their own reconfigure playbooks broken), and if the only
      change you made was the TLS, then run the following after the failed hlm-reconfigure.
      <codeblock>ansible-playbook -i hosts/verb_hosts _tls-endpoint-reconfigure.yml</codeblock>
    </section>
   
    
  </body>
</topic>
