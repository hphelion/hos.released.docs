<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="tls30">
  <title><ph conkeyref="HOS-conrefs/product-title"/> Enabling Transport Layer Security</title>
  <body>
    
    
    
    
    
    <section>
      <title> </title>
      <p outputclass="aTest">The Transport Layer Security (TLS) protocol, successor to SSL, provides
        the mechanisms to ensure authentication, non-repudiation, confidentiality, and integrity of
        user communications to and between the <keyword keyref="kw-hos"/> services from internal and
        public endpoints.</p>
      <p>OpenStack endpoints are HTTP (REST) services providing APIs to other OpenStack services on
        the management network. All traffic to OpenStack services coming in on the public endpoints
        and all traffic between services can be secured using TLS connections.</p>
      <ul>
        <li>API endpoints in the internal and admin VIPs can now be secured by TLS. </li>
        <li>Barbican-api can be secured by TLS from the loadbalancer to service endpoint. </li>
        <li>TLS can be turned off/on. </li>
        <li>You can add multiple trust chains (certificate authority (CA) certificates).</li>
        <li>Fully qualified domain names (FQDNs) can be used for public endpoints and now they can
          be changed. The abiity to change the domain names is new in <keyword
            keyref="kw-hos-phrase-30"/>. The external name in the input model files (in
            <codeph>~/helion/my_cloud/definition/data/network_groups.yml</codeph>) is where the
          domain name is indicated and changed. <p><b>Specifying Your Certificate in the Input
              Model</b></p>
          <p>Follow the steps below to specify the certificate in the input files:</p>
          <ol>
            <li>Log in to the lifecycle manager.</li>
            <li>Copy the certificate (containing both public and private keys) to the
                <codeph>~/helion/my_cloud/config/tls/certs/</codeph> directory.</li>
            <li id="private1">Replace the contents of
                <codeph>~/helion/hos/ansible/roles/tls-trust/files/frontend_cacert.pem</codeph> with
              the new CA certificate chain file provided by the entity that signed the certificate
              file that you added in the previous step. Since the CA certificate chain is
              essentially a public key and will be installed on all clients, take care that you
              don't accidently copy the contents of the certificate (which contains the private key)
              itself into the <codeph>frontend_cacert.pem</codeph> file.</li>
            <li>Edit <codeph>~/helion/my_cloud/definition/data/network_groups.yml</codeph> and set
              the values for <codeph>external-name</codeph> and <codeph>cert-file</codeph> to match
              the values for your environment. <p>If you are using IP addresses only then you will
                comment out the <codeph>external-name</codeph> value. </p><p>If you are using a FQDN
                then you will specify that in the <codeph>external-name</codeph> value, ensuring it
                matches the FQDN you used when creating your certificate.  </p><codeblock>  - name: EXTERNAL-API
    hostname-suffix: extapi
        
    load-balancers:
       - provider: ip-cluster
         name: extlb
         # If external-name is set then public urls in keystone
         # will use this name instead of the IP address
         # You must either set this to a name that can be resolved in your network
         # or comment out this line to use IP addresses
         <b>external-name: &lt;FQDN></b>
            
         tls-components:
            - default
         roles:
            - public
         <b>cert-file: &lt;cert-name></b></codeblock>
              <note>Do not enable TLS on the internal load balancer.</note></li>
          </ol></li>
      </ul>
      <p><b>Definitions</b></p>
      <p>The following entries in network_groups.yml serve the following purposes:</p>
      <dl>
        <dlentry>
          <dt>name: extlb</dt>
          <dd>The external load balancer</dd>
        </dlentry>
        <dlentry>
          <dt>external-name:</dt>
          <dd>This name will be used in place of the external VIP address. This name can be an FQDN.
            This will be registered in the public endpoints of the services. As noted above,
              <codeph>myhelion.test</codeph> should be changed to your FQDN.</dd>
        </dlentry>
        <dlentry>
          <dt>tls-components:</dt>
          <dd>This list of services will be put behind TLS. Note this is only being done for the
            load balancer in question, which is the external load balancer. The components in
            'default' are those services defined under service-components in
              <codeph>~/helion/my_cloud/definition/data/control_plane.yml</codeph>. If you want
            finer granularity, you can replace default with a list of individual components, such
            as: <codeblock>tls-components: - 'horizon' </codeblock></dd>
        </dlentry>
        <dlentry>
          <dt>cert-file:</dt>
          <dd>The default <codeph>my-public-cert</codeph> is already part of the playbook but you
            can specify your own name. When you specify your own you also need to have the
            certificate copied in <codeph>~/helion/my_cloud/config/tls/certs</codeph> on the
            lifecycle manager.</dd>
        </dlentry>
      </dl>
    </section>
    <section>
      <p><b>Deploy Your Certificate</b></p>
      <ol id="ol_ijd_tlv_4v">
        <li>Commit your changes to git:
          <codeblock>cd ~/helion/hos/ansible
git add -A
git commit -m "My config or other commit message"</codeblock></li>
        <li>Run the configuration processor:
          <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock></li>
        <li>At this point if you are doing this during the initial installation prior to your first
          run of the <codeph>site.yml</codeph> playbook then you should just continue on with the
          installation instructions. However, if you are changing or adding a new certificate
          post-installation then proceed to the next steps.</li>
        <li>Create the deployment directory:
          <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
        <li>Complete the deployment of your certificate by running the playbooks below. <p>To deploy
            the new certificate:</p>
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts FND-CLU-deploy.yml</codeblock>
          <p>To deploy the CA chain:</p>
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts horizon-deploy.yml</codeblock></li>
        <li>If you have utilized a FQDN for your public Identity endpoint, you will need to
          reconfigure the Nova service using the playbook below to ensure that the VNC proxy system
          picks up this change:
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts nova-reconfigure.yml</codeblock></li>
      </ol>
      <p>Note that the certificate that is installed by default, "my-public-cert", is linked to the
        name "myhelion.test". It is possible to deploy the system without generating or configuring
        a new certificate and come back and change it later, but access to the public URLS will have
        to use the "--insecure" flag to avoid "certificate mismatch" errors.</p>
    </section>
    <section><title>Enabling TLS in the input model</title>Because TLS is enabled by default during
      installation of <keyword keyref="kw-hos-phrase-30"/>, a test certificate is bundled with the
      release named <codeph>my-public-cert</codeph>. Having this default cert allows you to bring up
      a cloud without having to worry about certificates, and this is the recommended way to
      proceed. The certificate will not match the IP address of your environment's API endpoints,
      but you can ignore the warnings. <p>When moving into production, you will require a trusted
        certificate and you must add your own certificate and redeploy following the instructions
        below.</p><note type="attention">Be sure to install your own certificate for all production
        clouds after installing and testing your cloud.</note>
      <note>If you ever want to test or troubleshoot later, you will be able to revert to the sample
        certificate to get back to a stable state for testing.</note>
      
      <note>There are two alarms specific to certificates, 14-days to expiration and 1-day to expiration.</note>You can add your own
      certificate by following the instructions below. All changes must go into the following file:
        <codeph>data/network_groups.yml</codeph>
    </section>
    <section>TLS for the internal and admin Loadbalancer load-balancers:
      <codeblock>- provider: ip-cluster
        name: lb
        tls-components:
        - default
        components:
        # These services do not currently support TLS
        - vertica
        - rabbitmq
        - mysql
        - nova-metadata
        roles:
        - internal
        - admin
        cert-file: helion-internal-cert
        # The helion-internal-cert is a reserved name and
        # this certificate will be autogenerated. You
        # can bring in your own cert with a different name
        
        # cert-file: customer-provided-internal-cert
        # replace this with name of file in "config/tls/certs/"</codeblock>The
      configuration-processor will also create a request template for each named certificate under
        <codeph>info/cert_reqs/</codeph> This will be of the form
      <codeblock>info/cert_reqs/customer-provided-internal-cert</codeblock></section>
    <section>These request templates contain the subject <codeph>Alt-names</codeph> that the
      certificates need. You can add to this template before generating your certificate signing
      request (CSR).</section>
    <section>You would then send the CSR to your CA to be signed and once you receive the
      certificate, place it into  <codeph>config/tls/certs</codeph></section>
    <section> When you bring in your own certificate, you may want to bring in the trust chains (or
      CA certificate) for this certificate. This is usually not required if the CA is a public
      signer that gets bundled by the system. However, we suggest you include it  anyway by copying
      the file into the directory <codeph>config/cacerts/</codeph>. Note that the file extension
      should be .crt or it will not be processed by  <keyword keyref="kw-hos"/>.</section>
    
    <section><title>TLS for Barbican on the load balancer back end and service endpoint</title>
      
      <codeblock>- name: MANAGEMENT
        hostname-suffix: mgmt
        hostname: true
        
        tls-component-endpoints:
        # The following service endpoint is behind TLS
        - barbican-api
        component-endpoints:
        - default </codeblock>
      
    </section>
    
    
    <section><title>User-provided certificates and trust chains</title>
      <keyword keyref="kw-hos"/>  generates its own internal certificates but is designed to allow
      you to bring in your own certificates for the VIPs. Here is the general process. <ol>
        <li>You must have a server certificate and a CA certificate to go with it (unless the signer
          is a public CA and it's already bundled with most distributions). </li>
        <li>You must decide the names of the server certificates and configure the network_groups in
          the input model such that each Load balancer provider has at least one cert-name
          associated with it. </li>
        <li>Run the configuration processor. Note that you may or may not have the certificate file
          at this point. The configuration processor would create certificate request file artefacts
          under <codeph>info/cert_reqs/ </codeph>for each of the cert-name(s) in the network_groups.
          While there's no special reason to use the request file created for an external endpoint
          VIP certificate, it is important to use the request files created for internal
          certificates since there may be many canonical names for the internal VIP and they may be
          service specific and each of these need to be in the <codeph>Subject Alt Names</codeph>
          attribute of the certificate. </li>
        <li>Create a certificate signing request for this request file and send it to your
          organization's internal CA or a public CA to get it certified and issued with a
          certificate. You will now be in the possession of a server certificate and possibly a
          trust chain or CA certificate. </li>
        <li>Next, input it into the lifecycle manager: Server certificates can be dropped into
            <codeph>config/tls/certs</codeph> and CA certificates can be dropped into
            <codeph>config/tls/cacerts</codeph>. The file extension should be .crt for the CA
          certificate to be processed by <keyword keyref="kw-hos"/>. Visit this page for a working
          example: <xref href="generate_own_certs.dita#tls30"/></li>
      </ol></section>
    <section><title>Testing</title> You can easily determine if an endpoint is behind TLS. To do so,
      run the following command, which probes a Keystone identity service endpoint that's behind
      TLS:
      <codeblock>stack@deployerincloud-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.5:5000 | openssl x509 -fingerprint -noout 
        depth=0 CN = helion-vip
        verify error:num=20:unable to get local issuer certificate
        verify return:1
        depth=0 CN = helion-vip
        verify error:num=27:certificate not trusted
        verify return:1
        depth=0 CN = helion-vip
        verify error:num=21:unable to verify the first certificate
        verify return:1
        DONE
        SHA1 Fingerprint=C6:46:1E:59:C6:11:BF:72:5E:DD:FC:FF:B0:66:A7:A2:CC:32:1C:B8 </codeblock>
      The next command probes a MySQL endpoint that is not behind TLS
      <codeblock>stack@deployerincloud-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.5:3306 | openssl x509 -fingerprint -noout 
        140448358213264:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:s23_clnt.c:795:
        unable to load certificate
        140454148159120:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:703:Expecting: TRUSTED CERTIFICATE</codeblock>
    </section>
    <section><title>You can determine if the trust chain is correctly deployed by running the
        following commands:</title>
      <codeblock>stack@padawan-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.9:5000 2>/dev/null | grep code 
        Verify return code: 21 (unable to verify the first certificate)
stack@padawan-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.9:5000 -CAfile /usr/local/share/ca-certificates/helion_frontend_cacert.crt 2>/dev/null | grep code 
        Verify return code: 0 (ok) </codeblock>The
      first command returnss error 21, which is then fixed by providing the CA certificate file.
      This verifies that the CA certificate matches the server certificate. </section>
    <section><title>Turning TLS on or off</title>If you are using an example/default input-model,
      all supported TLS services will be enabled before deployment of your cloud. If you want to
      change this setting later, you can change the input model and reconfigure the system. The
      process is to: <ol>
        <li>Change the input model </li>
        <li>Commit the changes to the local git repository </li>
        <li>Run the ready-deployment playbook </li>
        <li>Run the hlm-reconfigure playbook </li>
      </ol> The commands would be similar to these:
      <codeblock>cd ~/helion
git add -A
git commit -m "TLS change"
cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost config-processor-run.yml -e encrypt="" -e rekey=""
        
ansible-playbook -i hosts/localhost ready-deployment.yml
cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts hlm-reconfigure.yml </codeblock>Note:
      If you run into issues with hlm-reconfigure, and if the only change you made was to TLS, then
      run the following after the failed hlm-reconfigure.
      <codeblock>ansible-playbook -i hosts/verb_hosts _tls-endpoint-reconfigure.yml</codeblock>
    </section>
   <section/>
    
    <section id="renewal"><title>Installing a Renewed Certificate</title>
      <p>If you previously installed a certificate that has now expired and need to install your
        renewed certificate, these steps will show you how.</p>
      <ol>
        <li>Log in to the lifecycle manager.</li>
        <li>Copy the new certificate (containing both public and private keys) to the
          <codeph>~/helion/my_cloud/config/tls/certs/</codeph> directory.</li>
        <li>Replace the contents of
          <codeph>~/helion/hos/ansible/roles/tls-trust/files/frontend_cacert.pem</codeph> with the
          new CA certificate chain file provided by the entity that signed the certificate file that
          you added in the previous step. Since the CA certificate chain is essentially a public key
          and will be installed on all clients, take care that you don't accidently copy the
          contents of the certificate (which contains the private key) itself into the
          <codeph>frontend_cacert.pem</codeph> file.</li>
        <li>If your renewed certificate has the same name as your previous certificate then skip to
          the next step. However, if your renewed certificate has a new name then you will need to
          update your <codeph>~/helion/my_cloud/definition/data/network_groups.yml</codeph> file
          with the new information. See the <xref href="tls.dita#configure_tls/install_cert"
            >Installing Your SSL Certificate</xref> section above for more details.</li>
        <li>Once that is complete you can then deploy your renewed certificate: <ol>
          <li>Commit your changes to git:
            <codeblock>cd ~/helion/hos/ansible
              git add -A
              git commit -m "My config or other commit message"</codeblock></li>
          <li>Run the configuration processor:
            <codeblock>cd ~/helion/hos/ansible
              ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock></li>
          <li>Create the deployment directory:
            <codeblock>cd ~/helion/hos/ansible
              ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
          <li>Complete the deployment of your certificate by running the playbooks below. <p>To
            deploy the new certificate:</p>
            <codeblock>cd ~/scratch/ansible/next/hos/ansible
              ansible-playbook -i hosts/verb_hosts FND-CLU-deploy.yml</codeblock>
            <p>To deploy the CA chain:</p>
            <codeblock>cd ~/scratch/ansible/next/hos/ansible
              ansible-playbook -i hosts/verb_hosts horizon-deploy.yml</codeblock></li>
        </ol>
        </li>
      </ol>
    </section>
    
    <section id="disable"><title>Disabling TLS</title>
      <p>If you don't want to use TLS, then you should change "tls-components" to "components" in
        <codeph>network_groups.yml</codeph>. Additionally, if you have a
        <codeph>network_groups.yml</codeph> file from a previous installation, you won't have TLS
        enabled unless you change "components" to "tls-components" in that file.</p>
    </section>
    
    <section id="configure_cipher">
      <title>Configuring the Cipher Suite for Public Endpoints</title>
      <p>We have set the default cipher suite to be: <codeph>HIGH:!aNULL:!eNULL:!DES:!3DES</codeph>.
        This is a recommended setting from the <xref
          href="http://docs.openstack.org/security-guide/secure-communication/introduction-to-ssl-and-tls.html"
          format="html" scope="external">OpenStack documentation site</xref>. You may override this.
        To do so, open <codeph>config/haproxy/defaults.yml</codeph> and edit it. The parameters can
        be found under haproxy_globals list.</p>
      <codeblock>- "ssl-default-bind-ciphers HIGH:!aNULL:!eNULL:!DES:!3DES"
        - "ssl-default-server-ciphers HIGH:!aNULL:!eNULL:!DES:!3DES"</codeblock>
      <p>Make the changes as needed. It's best to keep the two options identical.</p>
    </section>
    
  </body>
</topic>
