<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_ifg_n33_bt">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Integrating LDAP with the Identity
    Service</title>
  <body>
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section><title>Integrating with an external LDAP server</title>
      <p>If your organization, like most, uses an LDAP directory service such as Active Directory,
        you can integrate it with Keystone via the Keystone domain-specific configuration. There are
        two modes of domain-specific configuration. One is to use file store and the other is to use
        database store for configuration. By default, domain-specific driver configuration - file
        store is enabled but no domain is assigned to use the backend driver. The following
        instruction is to depict the way to get a specific domain to integrate LDAP with the
        identity service step by step.</p>
      <p>Integration with an external LDAP server is supported via the Keystone domain-specific
        configuration.</p>
      <p><b>Set up domain-specific driver configuration - file store </b></p> See the following for
      the detailed instruction to update configuration to a specific LDAP domain: <ol>
        <li> Ensure that the following configuration options in the main configuration file
          template: /home/stack/helion/my_cloud/config/keystone/keystone.conf.j2
          <codeblock>[identity]
          domain_specific_drivers_enabled = True
          domain_configurations_from_database = False</codeblock>
        </li>
        <li>Create a YAML file which contains the definition of the LDAP server connection. The
          sample file below is already provided as part of the lifecycle manager <xref
            href="../installation/using_git.dita#using_git">local git repository</xref>. It is
          available on a lifecycle manager in the following file:
            <codeblock>/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_sample.yml</codeblock><p>Save
            a copy of this file with a new name, for example:</p>
          <codeblock>/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_my.yml</codeblock>
          <note>Please refer to the [ldap] section of the <xref
              href="http://docs.openstack.org/liberty/config-reference/content/keystone-configuration-file.html"
              scope="external" format="html">Keystone</xref> documentation for OpenStack Liberty for
            the full option list and description.</note>
          <p>Here is the sample YAML configuration for keystone LDAP certificate settings, optimized
            for Microsoft Active Directory server:</p>
          <p outputclass="expandcode">Expand the code</p>
          <codeblock outputclass="nomaxheight hiddencode" id="ldapcert">---
 
keystone_domainldap_conf:
 
    # CA certificates file content.
    # Certificates are stored in Base64 PEM format. This may be entire LDAP server
    # certificate (in case of self-signed certificates), certificate of authority 
    # which issued LDAP server certificate, or a full certificate chain (Root CA
    # certificate, intermediate CA certificate(s), issuer certificate).
    #
    cert_settings:
      cacert: |
        -----BEGIN CERTIFICATE-----
 
        certificate appears here
 
        -----END CERTIFICATE-----
 
    # A domain will be created in MySQL with this name, and associated with ldap backend.
    # Installer will also generate a config file named /etc/keystone/domains/keystone.&lt;domain_name>.conf
    #
    domain_settings:
      name: dept1
      description: Dedicated domain for dept1 users
 
    conf_settings:
      identity:
         driver: keystone.identity.backends.ldap.Identity
 
 
      # For full list and description of ldap configuration options, please refer to
      # https://github.com/openstack/keystone/blob/master/etc/keystone.conf.sample or
      # http://docs.openstack.org/liberty/config-reference/content/keystone-configuration-file.html.
      #
      # Please note:
      #  1. LDAP configuration is read-only. Configuration which performs write operations (i.e. creates users, groups, etc)
      #     is not supported at the moment.
      #  2. LDAP is only supported for identity operations (reading users and groups from LDAP). Assignment
      #     operations with LDAP (i.e. managing roles, projects) are not supported.
      #  3. LDAP is configured as non-default domain. Configuring LDAP as a default domain is not supported.
      #
      ldap:
        url: ldap://ad.myorg.com
        suffix: DC=acme,DC=net
        query_scope: sub
        user_tree_dn: CN=Users,DC=acme,DC=net
        user : CN=admin,CN=Users,DC=acme,DC=net
        password: REDACTED
        user_objectclass: user
        user_id_attribute: cn
        user_name_attribute: cn
        user_allow_create: False
        user_allow_update: False
        user_allow_delete: False
        group_tree_dn: CN=Users,DC=acme,DC=net
        group_objectclass: group
        group_id_attribute: cn
        group_name_attribute: cn
        group_allow_create: False
        group_allow_update: False
        group_allow_delete: False
        use_pool: True
        user_enabled_attribute: userAccountControl
        user_enabled_mask: 2
        user_enabled_default: 512
        use_tls: True
       tls_req_cert: demand
        # if you are configuring multiple LDAP domains, and LDAP server certificates are issued
        # by different authorities, make sure that you place certs for all the LDAP backend domains in the 
        # cacert parameter as seen in this sample yml file so that all the certs are combined in a single CA file 
        # and every LDAP domain configuration points to the combined CA file. 
        # Note: 
        # 1. Please be advised that every time a new ldap domain is configured, the single CA file gets overwritten 
        # and hence ensure that you place certs for all the LDAP backend domains in the cacert parameter.
        # 2. There is a known issue on one cert per CA file per domain when the system processes 
        # concurrent requests to multiple LDAP domains. Using the single CA file with all certs combined 
        # shall get the system working properly*.
        
        tls_cacertfile: /etc/keystone/ssl/certs/all_ldapdomains_ca.pem
        
        # The issue is in the underlying SSL library. Upstream is not investing in python-ldap package anymore. 
        # It is also not python3 compliant.  </codeblock>
        </li>
        <li>As suggested in <xref href="../installation/using_git.dita#using_git">Using Git for
            Configuration Management</xref>, commit the new file into local git repository, and
          rerun playbooks for the configuration processor and ready deployment :
          <codeblock>$ cd ~/helion
$ git checkout site
$ git add my_cloud/config/keystone/keystone_configure_ldap_my.yml
$ git commit -m "Adding LDAP server integration config"
$ cd ~/helion/hos/ansible
$ ansible-playbook -i hosts/localhost config-processor-run.yml
$ ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
        </li>
        <li> Run reconfiguration playbook in a deployment area, passing a YAML file created at
          previous step as command line option: <codeblock>$ cd ~/scratch/ansible/next/hos/ansible
$ ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml -e@/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_my.yml</codeblock>
          <!-- stopped here 552pm mar 30 -->
        </li>
        <li> Follow these same steps for each LDAP domain with which you are integrating Keystone,
          creating a yaml file for each and running the reconfigure playbook once for each
          additional domain. </li>
        <li>Ensure that a new domain was created for LDAP (Microsoft AD in this example):  Set
          environment variables for admin level access <codeblock>$ source keystone.osrc</codeblock>
          Get list of domains <codeblock>$ openstack domain list</codeblock>
          <codeblock>+----------------------------------+---------+---------+----------------------------------------------------------------------+
| ID                               | Name    | Enabled | Description                                                          |
+----------------------------------+---------+---------+----------------------------------------------------------------------+
| 6740dbf7465a4108a36d6476fc967dbd | heat    | True    | Owns users and projects created by heat                              |
| default                          | Default | True    | Owns users and tenants (i.e. projects) available on Identity API v2. |
| b2aac984a52e49259a2bbf74b7c4108b | ad      | True    | Dedicated domain for users managed by Microsoft AD server            |
+----------------------------------+---------+---------+----------------------------------------------------------------------+</codeblock>
          <!--
 Get list of LDAP groups
$ openstack group list - -domain ad
+______________________________________+___________+
| ID                                                               | Name       |
+______________________________________+___________+
| 03976b0ea6f54a8e4c0032e8f756ad581f26915c7e77500c8d4aaf0e83afcdc6 | testgroup1 |
| 7ba52ee1c5829d9837d740c08dffa07ad118ea1db2d70e0dc7fa7853e0b79fcf | testgroup2 |
+______________________________________+___________+ -->
          <note>LDAP domain is read-only. This means that you cannot create new user or group
            records in it.</note>
        </li>
        <li> Once the LDAP user is granted the appropriate role, he can authenticate within the
          specified domain:  Set environment variables for admin level access
          <codeblock>$ source keystone.osrc</codeblock>  Get user record within ad domain <codeblock>$ openstack user show testuser1 --domain ad</codeblock>
          <codeblock>+-----------+------------------------------------------------------------------+
| Field     | Value                                                            |
+-----------+------------------------------------------------------------------+
| domain_id | 143af847018c4dc7bd35390402395886                                 |
| id        | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |
| name      | testuser1                                                        |
+-----------+------------------------------------------------------------------+</codeblock>
          Get list of LDAP groups <codeblock>$ openstack group list --domain ad</codeblock>
          <codeblock>+------------------------------------------------------------------+------------+
|  ID                                                              | Name       |
+------------------------------------------------------------------+------------+
|  03976b0ea6f54a8e4c0032e8f756ad581f26915c7e77500c8d4aaf0e83afcdc6| testgroup1 |
7ba52ee1c5829d9837d740c08dffa07ad118ea1db2d70e0dc7fa7853e0b79fcf   | testgroup2 |
+------------------------------------------------------------------+------------+</codeblock>
          Create a new role. Please note that role is not bound to the domain. <codeblock>$ openstack role create testrole1</codeblock>
          <codeblock>+-------+----------------------------------+
| Field | Value                            |
+-------+----------------------------------+
| id    | 02251585319d459ab847409dea527dee |
| name  | testrole1                        |
+-------+----------------------------------+</codeblock>
          Grant user a role within the domain. Please note that due to a current Openstack CLI
          limitation, you have to use the  user ID rather then user name when working with a
          non-default domain.
          <codeblock>$ openstack role add testrole1 --user e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 --domain ad</codeblock>
          Verify that the role was successfully granted
          <codeblock>$ openstack role assignment list --user e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 --domain ad
+----------------------------------+------------------------------------------------------------------+-------+---------+----------------------------------+
| Role                             | User                                                             | Group | Project | Domain                           |
+----------------------------------+------------------------------------------------------------------+-------+---------+----------------------------------+
| 02251585319d459ab847409dea527dee | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |       |         | 143af847018c4dc7bd35390402395886 |
+----------------------------------+------------------------------------------------------------------+-------+---------+----------------------------------+</codeblock>
          Authenticate (get a domain-scoped token) as new user with a new role. The --os-*
          command-line parameters specified below override respective OS_* environment  variables
          set by the keystone.osrc script to provide admin access. To ensure that the command below
          is executed in a clean environment, you may want log out from  the node and log in again. <codeblock>$ openstack --os-identity-api-version 3 \
            --os-username testuser1 \
            --os-password testuser1_password \
            --os-auth-url http://10.0.0.6:35357/v3 \
            --os-domain-name ad \
            --os-user-domain-name ad \
            token issue</codeblock>
          <codeblock>+-----------+------------------------------------------------------------------+
| Field     | Value                                                            |
+-----------+------------------------------------------------------------------+
| domain_id | 143af847018c4dc7bd35390402395886                                 |
| expires   | 2015-09-09T21:36:15.306561Z                                      |
| id        | 6f8f9f1a932a4d01b7ad9ab061eb0917                                 |
| user_id   | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |
+-----------+------------------------------------------------------------------+</codeblock>
        </li>
        <li>Users can also have a project within the domain and get a project-scoped token:  Set
          environment variables for admin level access <codeblock>$ source keystone.osrc</codeblock>
          Create a new project within the domain <codeblock>$ openstack project create testproject1 --domain ad</codeblock>
          <codeblock>+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description |                                  |
| domain_id   | 143af847018c4dc7bd35390402395886 |
| enabled     | True                             |
| id          | d065394842d34abd87167ab12759f107 |
| name        | testproject1                     |
+-------------+----------------------------------+</codeblock>
          Grant the user a role with a project, re-using a role created in the previous example.
          Please note that due to a current Openstack CLI limitation, we have to use  user ID rather
          then user name when working with a non-default domain.
          <codeblock>$ openstack role add testrole1 --user e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 --project testproject1</codeblock>
          Verify that the role was successfully granted <codeblock>$ openstack role assignment list --user e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 --project testproject1</codeblock>
          <codeblock>+----------------------------------+------------------------------------------------------------------+-------+----------------------------------+--------+
| Role                             | User                                                             | Group | Project                          | Domain |
+----------------------------------+------------------------------------------------------------------+-------+----------------------------------+--------+
| 02251585319d459ab847409dea527dee | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |       | d065394842d34abd87167ab12759f107 |        |
+----------------------------------+------------------------------------------------------------------+-------+----------------------------------+--------+</codeblock>
          Authenticate (get a project-scoped token) as the new user with a new role. The --os-*
          command line parameters specified below override respective OS_* environment  variables
          set by keystone.osrc to provide admin access. To ensure that the command below is executed
          in a clean environment, you may want log out from  the node and log in again. Please note
          that both --os-project-domain-name and --os-project-user-name parameters are needed to
          justify that both user and  project are not in the default domain. <codeblock>$ openstack --os-identity-api-version 3 \
            --os-username testuser1 \
            --os-password testuser1_password \
            --os-auth-url http://10.0.0.6:35357/v3 \
            --os-project-name testproject1 \
            --os-project-domain-name ad \
            --os-user-domain-name ad \
            token issue</codeblock>
          <codeblock>+------------+------------------------------------------------------------------+
| Field      | Value                                                            |
+------------+------------------------------------------------------------------+
| expires    | 2015-09-09T21:50:49.945893Z                                      |
| id         | 328e18486f69441fb13f4842423f52d1                                 |
| project_id | d065394842d34abd87167ab12759f107                                 |
| user_id    | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |
+------------+------------------------------------------------------------------+</codeblock>
        </li>
      </ol>
    </section>


    <section><title>Set up or switch to domain-specific driver configuration - database
        store</title> Overview To set up Domain-Specific Driver Configuration - Database Store, the
      steps are to deploy the Domain-Specific Driver Configuration - File Store first, as shown
      above. Then switch to the database store. Once switched, all of the domain-specific driver
      configuration files shall be ignored by the system. No domain mixture of file and database
      stores is supported. Detailed Instruction It is assumed domain-specific driver configuration -
      file store has been set up working properly. See the following instruction for the switch <ol>
        <li> Ensure that the following configuration options in the main configuration file template
          in the file:
          <codeblock>/home/stack/helion/my_cloud/config/keystone/keystone.conf.j2
          [identity]
          domain_specific_drivers_enabled = True
          domain_configurations_from_database = True
          
          [domain_config]
          driver = sql</codeblock>
        </li>
        <li>Once the template is modified, commit the change to the local git repository, and rerun
          the configuration processor / deployment area preparation playbooks (as suggested at Using
          Git for Configuration Management):
          <codeblock>$ cd ~/helion
            $ git checkout site
            $ git add -A
            # verify added files 
            $ git status
            $ git commit -m "Use Domain-Specific Driver Configuration - Database Store: more description here..."
            $ cd ~/helion/hos/ansible
            $ ansible-playbook -i hosts/localhost config-processor-run.yml
            $ ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
        </li>
        <li>Run reconfiguration playbook in a deployment area:
          <codeblock>$ cd ~/scratch/ansible/next/hos/ansible
            $ ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml</codeblock>
        </li>
        <li>Upload the domain-specific config files to the database if they has not been loaded. If
          they have already loaded and just like to switch back to database store mode, then skip
          this upload step and move on to step 5 <ol>
            <li> Go to either one of control nodes Keystone deployed. </li>
            <li>Verify domain-specific driver configuration files are located under the directory
              (default /etc/keystone/domains) with the format: keystone.&lt;domain name>.conf Use
              Keystone manager utility to load domain-specific config files to the database <ol>
                <li>Option 1: Upload all configuration files to the SQL database:
                  <codeblock>$ keystone-manage domain_config_upload --all</codeblock>
                </li>
                <li>Option 2: Upload individual domain-specific configuration files by specifying
                  the domain name one by one:
                  <codeblock>$ keystone-manage domain_config_upload --domain-name &lt;domain name></codeblock>
                  for example,  keystone-manage domain_config_upload --domain-name ad Please be
                  advised that Keystone manager utility doesn't upload domain-specific driver
                  configuration file the second time for the same domain. For the management of the
                  domain-specific driver configuration in the database store, you may refer to
                  Domain-Specific Driver Configuration - Database Store Management via Identity API
                  - Draft Release Document.</li>
              </ol></li>
          </ol></li>
        <li>Verify that the switched domain driver configuration for LDAP (Microsoft AD in this
          example) in the database store works properly: Set environment variables for admin level
          access <codeblock>$ source keystone.osrc</codeblock>  Get list of domain user <codeblock>$ openstack user list --domain ad</codeblock>
          <codeblock>+------------------------------------------------------------------+------------+
            | ID                                                               | Name       |
            +------------------------------------------------------------------+------------+
            | e7dbec51ecaf07906bd743debcb49157a0e8af557b860a7c1dadd454bdab03fe | testuser1  |
            | 8a09630fde3180c685e0cd663427e8638151b534a8a7ccebfcf244751d6f09bd | testuser2  |
            | ea463d778dadcefdcfd5b532ee122a70dce7e790786678961420ae007560f35e | testuser3  |
            +------------------------------------------------------------------+------------+</codeblock>
          Get user record within ad domain <codeblock> $ openstack user show testuser1 --domain ad</codeblock>
          <codeblock>+-----------+------------------------------------------------------------------+
            | Field     | Value                                                            |
            +-----------+------------------------------------------------------------------+
            | domain_id | 143af847018c4dc7bd35390402395886                                 |
            | id        | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |
            | name      | testuser1                                                        |
            +-----------+------------------------------------------------------------------+</codeblock>
          Get list of LDAP groups <codeblock>$ openstack group list --domain ad</codeblock>
          <codeblock>+------------------------------------------------------------------+------------+
            | ID                                                               | Name       |
            +------------------------------------------------------------------+------------+
            | 03976b0ea6f54a8e4c0032e8f756ad581f26915c7e77500c8d4aaf0e83afcdc6 | testgroup1 |
            | 7ba52ee1c5829d9837d740c08dffa07ad118ea1db2d70e0dc7fa7853e0b79fcf | testgroup2 |
            +------------------------------------------------------------------+------------+</codeblock>
          <note>LDAP domain is read-only. This means that you can not create new user or group
            record in it.</note></li>
      </ol>
    </section>

    <section><title>Domain-specific driver configuration - switchig from database to file store</title>
      <p> Overview This document is to depict the steps for Keystone to switch domain-specific
        driver configuration from database store to file store. It is assumed</p>
      <ul>
        <li>Domain-specific driver configuration - database store has been set up working properly. </li>
        <li>Domain-specific driver configuration files with the format: keystone.&lt;domain
          name>.conf have already located and verified in the specific directory (by default,
          /etc/keystone/domains/) in all of the control nodes.</li>
      </ul>
      <ol>
        <li> Ensure that the following configuration options in the main configuration file template
          in the file:
          <codeblock>/home/stack/helion/my_cloud/config/keystone/keystone.conf.j2
          [identity]
          domain_specific_drivers_enabled = True
          domain_configurations_from_database = False
          
          [domain_config]
          # driver = sql</codeblock>
        </li>
        <li>Once the template is modified, commit the change to the local git repository, and rerun
          the configuration processor / deployment area preparation playbooks (as suggested at Using
          Git for Configuration Management):
          <codeblock>$ cd ~/helion
          $ git checkout site
          $ git add -A
          # verify added files 
          $ git status
          $ git commit -m "Domain-Specific Driver Configuration - Switch From Database Store to File Store: more description here..."
          
          $ cd ~/helion/hos/ansible
          $ ansible-playbook -i hosts/localhost config-processor-run.yml
          $ ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
        </li>
        <li>Run reconfiguration playbook in a deployment area:
          <codeblock>$ cd ~/scratch/ansible/next/hos/ansible
          $ ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml</codeblock>
        </li>
        <li>Verify that the switched domain driver configuration for LDAP (Microsoft AD in this
          example) using file store works properly:  Set environment variables for admin level
          access <codeblock>$ source keystone.osrc</codeblock>  Get list of domain user <codeblock>$ openstack user list --domain ad</codeblock>
          <codeblock>+------------------------------------------------------------------+------------+
          | ID                                                               | Name       |
          +------------------------------------------------------------------+------------+
          | e7dbec51ecaf07906bd743debcb49157a0e8af557b860a7c1dadd454bdab03fe | testuser1  |
          | 8a09630fde3180c685e0cd663427e8638151b534a8a7ccebfcf244751d6f09bd | testuser2  |
          | ea463d778dadcefdcfd5b532ee122a70dce7e790786678961420ae007560f35e | testuser3  |
          +------------------------------------------------------------------+------------+</codeblock>
          Get user record within ad domain <codeblock>$ openstack user show testuser1 --domain ad</codeblock>
          <codeblock>+-----------+------------------------------------------------------------------+
          | Field     | Value                                                            |
          +-----------+------------------------------------------------------------------+
          | domain_id | 143af847018c4dc7bd35390402395886                                 |
          | id        | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |
          | name      | testuser1                                                        |
          +-----------+------------------------------------------------------------------+</codeblock>
          Get list of LDAP groups <codeblock>$ openstack group list --domain ad</codeblock>
          <codeblock>+------------------------------------------------------------------+------------+
          | ID                                                               | Name       |
          +------------------------------------------------------------------+------------+
          | 03976b0ea6f54a8e4c0032e8f756ad581f26915c7e77500c8d4aaf0e83afcdc6 | testgroup1 |
          | 7ba52ee1c5829d9837d740c08dffa07ad118ea1db2d70e0dc7fa7853e0b79fcf | testgroup2 |
          +------------------------------------------------------------------+------------+</codeblock>
          Note: Note: LDAP domain is read-only. This means that you can not create new user or group
          record in it. </li>
      </ol>
    </section>


    <section><title>Update LDAP CA certificates</title> Overview There are chances that LDAP CA
      certificates may expire or for some reason not work anymore. This document shows you the steps
      to update the LDAP CA certificates on the identity service side. Detailed Instruction See the
      following for the detailed instruction: Follow the steps below to update LDAP CA certificates <ol>
        <li> Locate the file keystone_configure_ldap_certs_sample.yml
          <codeblock>/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_certs_sample.yml</codeblock>
        </li>
        <li>Save a copy of this file with a new name, for example:
          <codeblock>/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_certs_all.yml</codeblock>
        </li>
        <li>Edit the file and specify the correct single file path name for the ldap certificates.
          This file path name has to be consistent with the one defined in tls_cacertfile of the
          domain-specific configuration. Edit the file and populate or update it with ldap CA
          certificates for all LDAP domains. </li>
        <li>As suggested at Using Git for Configuration Management, commit the new file into local
          git repository, and rerun playbooks of configuration processor and deployment area
          preparation:
          <codeblock># Commit the new file into local git repository
          $ cd ~/helion
          $ git checkout site
          $ git add -A</codeblock>
          verify added files
          <codeblock>$ git status
            $ git commit -m "Update LDAP CA certificates: more description here..."</codeblock>
          Run configuration processor / deployment area preparation playbooks
          <codeblock>$ cd ~/helion/hos/ansible
          $ ansible-playbook -i hosts/localhost config-processor-run.yml
          $ ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
        </li>
        <li>Run reconfiguration playbook in deployment area: 
          <codeblock>$ cd ~/scratch/ansible/next/hos/ansible
          $ ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml
          -e@/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_certs_all.yml </codeblock></li>
      </ol>
    </section>


    <section><title>Limitations</title>
      <keyword keyref="kw-hos-phrase-30"/> domain-specific configuration: <ul>
        <li>Read-only LDAP backends. </li>
        <li>No Global User Listing: Once domain-specific driver configuration is enabled, the
          operations of listing all users and listing all groups are not supported. Those calls will
          need either a domain filter to be specified or usage of a domain scoped token. </li>
        <li>No mixture of domain-specific driver configuration file store and database store in a
          single Keystone instance. Once database store enabled within the Keystone instance, file
          store shall be ignored and vice versa. </li>
        <li>List limit of identity data records can only apply for all-domain level but not
          per-domain level on Keystone side. </li>
      </ul>
      <keyword keyref="kw-hos-phrase-30"/> API-based domain-specific configuration management <ul>
        <li>No GUI dashboard for domain-specific driver configuration management </li>
        <li>API-based Domain specific config does not check for type of option. </li>
        <li>API-based Domain specific config does not check for option values supported. </li>
        <li>API-based Domain config method does not provide retrieval of default values of
          domain-specific configuration options. </li>
        <li>Status: Domain-specific driver configuration database store is a preview feature for
            <keyword keyref="kw-hos-phrase-30"/>. </li>
      </ul>
    </section>














    <!--<section id="encrypt"><title>Transport Layer Security (TLS) Support</title>
      <p> The Identity service supports various encryption options when an external LDAP or
        Microsoft Active Directory is configured for external authentication including: </p>
      <ul>
        <li>External authentication with LDAP and Microsoft Active Directory systems</li>
        <li>LDAPS specific support</li>
        <li>STARTTLS</li>
        
      </ul>
    </section>-->

    <!-- <section><title>Support and Troubleshooting</title>
    
    </section>-->
  </body>
</topic>
