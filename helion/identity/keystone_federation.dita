<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="auditing">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Keystone to Keystone Federation</title>
  <body>
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section>
      <title> </title>
      <p>Keystone to Keystone (K2K) is supported in<keyword keyref="kw-hos-phrase-30"/>. By running
        a playbook with the customer provided configuration parameters, K2K will be enabled
        automatically. It's disabled by default.</p>
      <p>Support for Keystone to Keystone federation happens on the API level, and you must
        implement it using your own client code by calling the supported APIs. Python-keystoneclient
        has supported APIs to access the K2K APIs,</p>
      <p>The attached file <i>k2kclient.py</i> is an example and the diagram in the end of this page
        shows how the flows a client will need to access.</p>
    </section>
    <section>
      <title><b>Set up a service provider (SP)</b></title>
    </section>
    <section>
      <p>To setup a Keystone as a service provider, follow the instructions below.</p>
      <ol id="ol_ug3_fdb_mv">
        <li>Create a config file <i>k2k.yml</i> with the following parameters and place it in any
          directory in your deployer, for example <i>/tmp</i>.
          <codeblock>keystone_trusted_idp: k2k
keystone_sp_conf:
	shib_sso_idp_entity_id: &lt;protocol>://&lt;idp_host>:&lt;port>/v3/OS-FEDERATION/saml2/idp
	shib_sso_application_entity_id: http://service_provider_uri_entityId
	target_domain:
		name: domain1
		description: my domain
	target_project:
		name: project1
		description: my project
	target_group:
		name: group1
		description: my group
	role:
		name: service
	idp_metadata_file: /tmp/idp_metadata.xml
	identity_provider:
		id: my_idp_id
		description: This is the identity service provider.
	mapping:
		id: mapping1
		rules_file: /tmp/k2k_sp_mapping.json
	protocol:
		id: saml2
	attribute_map:
		-
		  name: name1
		  id: id1</codeblock>
          Here are some detailed descriptions for each of the attributes.
         <!-- <codeblock>keystone_trusted_idp: A flag to indicate if this configuration is used for K2K or Websso. The value can be either 'k2k' or 'adfs'.
keystone_sp_conf:
    shib_sso_idp_entity_id: The Identity Provider URI used as a entity Id to identity the IdP. It is suggested to use the following value -
                            &lt;protocol>://&lt;idp_host>:&lt;port>/v3/OS-FEDERATION/saml2/idp.
    shib_sso_application_entity_id: The Service Provider URI used as a entity Id. It can be any URI here for K2K.
    target_domain: A domain where the group will be created from.
        name: Any domain name. If it does not exist, it will be created or be updated.
        description: Any description.
    target_project: A project scope that the group has.
        name: Any project name. If it does not exist, it will be created or be updated.
        description: Any description.
    target_group: A group will be created from 'target_domain'.
        name: Any group name. If it does not exist, it will be created or be updated.
        description: Any description.
    role: A role will be assigned on 'target_project'. This role impacts the idp user scoped token permission at sp side.
        name: It has to be an existing role.
    idp_metadata_file: A reference to the IdP metadata file that validates the SAML2 assertion.
    identity_provider: A supported IdP
        id: Any Id. If it does not exist, it will be created or be updated. This Id needs to be shared with the client so that the right mapping will be selected.
        description: Any description.
    mapping: A mapping in json format that mapps a federated user to a corresponding group.
        id: Any Id. If it does not exist, it will be created or be updated.
        rules_file: A reference to the file that has the mapping in json.
    protocol: The supported federation protocol.
        id: 'saml2' is the only supported protocol for K2K.
    attribute_map: A shibboleth mapping defined additional attributes to map the attributes from the SAML2 assertion to the K2K mapping that SP understands.
                   K2K does not required any additional attribute mapping.
        -
          name: An attribute name from the SAML2 assertion.
          id: An Id that the above name will be mapped to.</codeblock>-->
      
          
          <dl>
            <dlentry>
              <dt> keystone_trusted_idp</dt>
              <dd>A flag to indicate if this configuration is used for K2K or Websso. The value can
                be either 'k2k' or 'adfs'. </dd>
            </dlentry>
          </dl>
          <b>keystone_sp_conf</b>
          <dl>
    
            <dlentry>
              <dt>shib_sso_idp_entity_id</dt>
              <dd> The Identity Provider URI used as a entity Id to identity the IdP. It is
                suggested to use the following value -
                &lt;protocol>://&lt;idp_host>:&lt;port>/v3/OS-FEDERATION/saml2/idp. </dd>
            </dlentry>
            <dlentry>
              <dt>shib_sso_application_entity_id</dt>
              <dd>The Service Provider URI used as a entity Id. It can be any URI here for K2K.
              </dd>
            </dlentry>
            <dlentry>
              <dt>target_domain</dt>
              <dd>A domain where the group will be created from. </dd>
            </dlentry>
            <dlentry>
              <dt>name</dt>
              <dd>Any domain name. If it does not exist, it will be created or be updated. </dd>
            </dlentry>
            <dlentry>
              <dt>description</dt>
              <dd>Any description. </dd>
            </dlentry>
            <dlentry>
              <dt>target_project</dt>
              <dd>A project scope that the group has. </dd>
            </dlentry>
            <dlentry>
              <dt>name</dt>
              <dd>Any project name. If it does not exist, it will be created or be updated. </dd>
            </dlentry>
            <dlentry>
              <dt>description</dt>
              <dd>Any description. </dd>
            </dlentry>
            <dlentry>
              <dt>target_group</dt>
              <dd>A group will be created from 'target_domain'. </dd>
            </dlentry>
            <dlentry>
              <dt>name</dt>
              <dd>Any group name. If it does not exist, it will be created or be updated. </dd>
            </dlentry>
            <dlentry>
              <dt>description</dt>
              <dd>Any description. </dd>
            </dlentry>
            <dlentry>
              <dt>role</dt>
              <dd>A role will be assigned on 'target_project'. This role impacts the idp user scoped
                token permission at sp side. </dd>
            </dlentry>
            <dlentry>
              <dt>name</dt>
              <dd>It has to be an existing role. </dd>
            </dlentry>
            <dlentry>
              <dt>idp_metadata_file</dt>
              <dd>A reference to the IdP metadata file that validates the SAML2 assertion. </dd>
            </dlentry>
            <dlentry>
              <dt>identity_provider</dt>
              <dd>A supported IdP </dd>
            </dlentry>
            <dlentry>
              <dt>id</dt>
              <dd>Any Id. If it does not exist, it will be created or be updated. This Id needs to
                be shared with the client so that the right mapping will be selected. </dd>
            </dlentry>
            <dlentry>
              <dt>description</dt>
              <dd>Any description. </dd>
            </dlentry>
            <dlentry>
              <dt>mapping</dt>
              <dd>A mapping in json format that mapps a federated user to a corresponding group.
              </dd>
            </dlentry>
            <dlentry>
              <dt>id</dt>
              <dd>Any Id. If it does not exist, it will be created or be updated. </dd>
            </dlentry>
            <dlentry>
              <dt>rules_file</dt>
              <dd>A reference to the file that has the mapping in json. </dd>
            </dlentry>
            <dlentry>
              <dt>protocol</dt>
              <dd>The supported federation protocol. </dd>
            </dlentry>
            <dlentry>
              <dt>id</dt>
              <dd>'saml2' is the only supported protocol for K2K. </dd>
            </dlentry>
            <dlentry>
              <dt>attribute_map</dt>
              <dd>A shibboleth mapping defined additional attributes to map the attributes from the
                SAML2 assertion to the K2K mapping that SP understands. K2K does not required any
                additional attribute mapping. - </dd>
            </dlentry>
            <dlentry>
              <dt>name</dt>
              <dd>An attribute name from the SAML2 assertion. </dd>
            </dlentry>
            <dlentry>
              <dt>id</dt>
              <dd>An Id that the above name will be mapped to.</dd>
            </dlentry>
          </dl>
        </li>
        <li>Create a metadata file that is referenced from the above config file, for example
            <i>/tmp/idp_metadata.xml</i>. The content of the metadata file is from the IdP and can
          be found in <i>/etc/keystone/idp_metadata.xml</i>.<ol id="ol_myr_zgb_mv">
            <li>Create a mapping file that is referenced from the above config file, for example
                <i>/tmp/k2k_sp_mapping.json. </i>The following is an example of mapping file. <codeblock>[
  {
    "local": [
      {
        "user": {
          "name": "{0}"
        }
      },
      {
        "group": {
           "name": "group1",
           "domain":{
             "name": "domain1"
           }
        }
      }
    ],
    "remote":[{
      "type": "openstack_user"
    },
    {
      "type": "Shib-Identity-Provider",
      "any_one_of":[
         "https://idp_host:5000/v3/OS-FEDERATION/saml2/idp"
      ]
     }
    ]
   }
]           </codeblock>
              <p>More details of how the K2K mapping works can be found here - <i><xref
                    href="https://github.com/openstack/keystone/blob/master/doc/source/mapping_combinations.rst"
                    format="html" scope="external"
                    >https://github.com/openstack/keystone/blob/master/doc/source/mapping_combinations.rst</xref></i></p></li>
          </ol></li>
        <li>Go to <i>/home/stack/scratch/ansible/next/hos/ansible </i>and run the following to
          enable SP in Keystone -'<i>ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml
            -e@/tmp/k2k.yml</i>'</li>
      </ol>
      <p><b><b>Set up an identity provider (IdP)</b></b></p>
      <p>To setup a Keystone as a SP, please follow the instructions below.</p>
      <ol>
        <li>Create a config file <i>k2k.yml</i> with the following parameters and place it in any
          directory in your deployer, for example <i>/tmp</i>.
          <codeblock outputclass="width66">keystone_k2k_idp_conf:
            service_provider: 
            -
            id: my_sp_id
            description: This is service provider.
            sp_url: https://sp_host:5000
            auth_url: https://sp_host:5000/v3
            signer_cert: -----BEGIN CERTIFICATE-----\nMIIDmDCCAoACCQDS+ZDoUfrcIzANBgkqhkiG9w0BAQsFADCBjDELMAkGA1UEBhMC\nVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExEjAQBgNVBAcMCVN1bm55dmFsZTEMMAoG\nA1UECgwDSFBFMRQwEgYDVQQLDAtFbmdpbmVlcmluZzEQMA4GA1UEAwwHSzJLX0lk\nUDEeMBwGCSqGSIb3DQEJARYPazJrX2lkcEBocGUuY29tMCAXDTE1MTEyMDAxMjg1\nMFoYDzIxMTUxMDI3MDEyODUwWjCBjDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNh\nbGlmb3JuaWExEjAQBgNVBAcMCVN1bm55dmFsZTEMMAoGA1UECgwDSFBFMRQwEgYD\nVQQLDAtFbmdpbmVlcmluZzEQMA4GA1UEAwwHSzJLX0lkUDEeMBwGCSqGSIb3DQEJ\nARYPazJrX2lkcEBocGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\nAQEA1gRiHiwSO6L5PrtroHi/f17DQBOpJ1KMnS9FOHSm1mES2xlB46y/GebGIZp+\nivUbLvbJHdi0axcA0OuzCLPx6t338npJzEELXNHhlSJ2KHUuLtdpltsFGMISFjD5\nkuQgBi4bEUyhQFRWkcgqL3fK5lwTB/YaMRMnLA67QDvSPOFcJFZIOhICY0cVKsHJ\nxxRbi8XfNZOLE65+yq5onxZuWH+Kbg7bOGBl45YXXjncjSN/LjruoDYv+PrHuCuF\n8B9k7F7PtGaYBnqf4z79DErxdjQZvJ3rN7W/qj04gcdaeAxoHy0+cCp+2zejerEh\n00ax1NYYnPRrEhrcU8wbM47UvQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQDD99xf\nDw4+XRzU5ii1YuJpIsFWxbCfCqAfBtz6WaEV/UssKiEkcsasOseQvD7EUMVRhxlP\ne+7Al/vazn4xwSJzthv3NQq5g5rAMuY9Dsu5Smyok6ygY1mAAJcLGfF2VtaaSo8B\nUGj5SN8jjhOG+Yh2aNOBt6GVJlE36oFeHRVPGByq/UEGlozEWT4qAZHql8/nQlzD\nhup36JhXxtgeP/DMQOAn7HYeVJQ6+xoUWZIQhvrlvDdhWskasfOtPqI0c8/BLFoL\nCvX5vYvFSXZMyhNnMOOPyf7bTXEr+TBCVaO957FLowGv8VnW/nLVEL5tkTRWVy1A\nOpKEvhlMsl5I/tle\n-----END CERTIFICATE-----
            signer_key: -----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEA1gRiHiwSO6L5PrtroHi/f17DQBOpJ1KMnS9FOHSm1mES2xlB\n46y/GebGIZp+ivUbLvbJHdi0axcA0OuzCLPx6t338npJzEELXNHhlSJ2KHUuLtdp\nltsFGMISFjD5kuQgBi4bEUyhQFRWkcgqL3fK5lwTB/YaMRMnLA67QDvSPOFcJFZI\nOhICY0cVKsHJxxRbi8XfNZOLE65+yq5onxZuWH+Kbg7bOGBl45YXXjncjSN/Ljru\noDYv+PrHuCuF8B9k7F7PtGaYBnqf4z79DErxdjQZvJ3rN7W/qj04gcdaeAxoHy0+\ncCp+2zejerEh00ax1NYYnPRrEhrcU8wbM47UvQIDAQABAoIBADOcAv07q3nuJyTV\nlXKxK5zPgU4mb5gn8/jDuXGPz9vKtP1Y7ea1dbANUqIv22wvB0sgAAfOhlN8zJmU\n/SuQGTqGJJC4pKs41ECh7EBGey/uciChmbjjQCtkQXBQhx7BHGfhHm3hiNE2hVnK\nZ0HjJW6/rWcyFcbX045wTv+CbYR4cwGktQH+uzIkf4nxEzZ+v8ubx/JDLUet6eNz\nLPKLasIhiOU4YL2poX5wJ68up3SOTDHOOPlGvp26ml5ZhfhEiqnHZyR0x6vqTWi6\nwUrBOAwz6gnifmAdPLglso61b+S6VGfTCyyjCldj6Yrj8DMbPpO/gAXY2Xgs1Rpy\nAciL1wECgYEA82IDWOwNBhqnW4DzXaYRpHjx32ttPb60NKYtk4e33v9TW8IEXH5W\n4SVxFoDxor4Mmqp3k2CEKhmf6VRrxJNFYIqXRUqO5dBjh237zLVP4UCHhW3p3+uM\nKZl0bZ605jhd0WUGvzN2s0iP+1q+6m/++8hW008RB38LCKYsh6QHqjECgYEA4Rym\nq40ylLqqdCo3sYetR6eqidT7/8rZvN7EmaXHsvW1oCVhBxWd+X/7DCYztVGOOwM8\n7eKXZPtkEV3rWzgCE7NSP8X7AbOxej9Z9qYeM282KjYCHclJD/wkCwa1btX3qGGF\ngDbVw3/DcCmTkUWtq08zdz0HGfPC9fc+UTw95E0CgYA1BwrhqfSgetgx6KOdqNw5\nMJzKZ/aSOGW8/uP5O93E+W5pFJmsqV42idjc5VVAdxX58OBCvQmuvoyH4vvkBY5d\nHXUeBMOjsMausDjnfi2cT1n3qV4GiqSsP6INbEHP00IlqFRS/lyDbXDpe/kSzToK\nE7lPKu/z6Ss3RDV5jDSbUQKBgQCDJbMAPPmb5ohJtxLNTdMo7MiRFlFd+6sQuuPk\n8809OKMA0uYNP43SfroeoN79Iq9vN/q2SI2VGlR5PbNRaHblTVJ8rvYGTs71/pSF\n+s+bfY4b120yN0NmmanR9q2bDfMD2RTy1n+BLx0IamB7gRGlvTWpoRdTCk2qCMn4\nf9U6/QKBgB8g8Q9hc2WDRjk6K+xyfNZ3pCiHmjTHvCt305DhRDjEjenj0WuXW/QW\nfHvjOW+UrZXg5K56ZKNbew8i5W4McrUoxFhk5rZRisFgetD4gxSgPCuiY7fE/QDX\nScXlxGigdJBUDKkmsdO4q0H1EGXYudTYP8x14v0U8S1N</codeblock>
          Here are some detailed descriptions for each of the attributes. <codeblock>keystone_k2k_idp_conf:
            service_provider: One or more Service Provider can be defined. If it does not exist, it will be created or be updated.
            -
            id: Any Id. If it does not exist, it will be created or be updated. This Id needs to be shared with the client so that he knows where the Service Provider is.
            description: Any description.
            sp_url: Service Provider base URL.
            auth_url: Service Provider Auth URL.
            signer_cert: Content of self-signed certificate that is embedded in the metadata file. The validity is recommended to be valid for a longer period of time, for example 3650 days(10 years).
            signer_key: A private key that has key size 2048.</codeblock>
          <p>The following are some details on creating a private key and a self-signed
            certificate.</p>
          <codeblock>The command tool 'openssl' is required. If the system does not have it, install it.
            
            # Create a private key
            openssl genrsa -out myidp.key 2048
            
            # Generate a certificate request named myidp.csr. When prompted, choose CommonName the server's hostname
            openssl req -new -key myidp.key -out myidp.csr
            
            # Generate a self-signed certificate named myidp.cer
            openssl x509 -req -days 3650 -in myidp.csr -signkey myidp.key -out myidp.cer</codeblock>
        </li>
        <li>Go to /home/stack/scratch/ansible/next/hos/ansible and run the following to enable SP in
          Keystone - 'ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml
          -e@/tmp/k2k.yml'</li>
      </ol>
    </section>
    <section><title>Test it out</title> The attached script k2kclient.py can be used as an example
      for the end-to-end flows. To run k2kclient.py, please follow the instructions below. <ol>
        <li>There are few parameters need to be changed in the beginning of the script, like
          <codeblock># IdP auth URL
          self.auth_url = "http://idp_host:5000/v3/"
          self.project_name = "my_project_name"
          self.project_domain_name = "my_project_domain_name"
          self.username = "test"
          self.password = "mypass"
          self.user_domain_name = "my_domain"
          # identity provider Id that is defined in the SP config
          self.idp_id = "my_idp_id"
          # service provider Id that is defined in the IdP config
          self.sp_id = "my_sp_id"</codeblock>
        </li>
        <li>Install python-keystoneclient with it's dependencies.</li>
        <li>Run the script 'python k2kclient.py' and an unscoped token will be returned from the
          Service Provider.</li>
      </ol> At this point, domain or project scope of the unscoped taken can be discovered by
      sending the following URLs -
      <codeblock>curl -k -X GET -H "X-Auth-Token: &lt;unscoped token>" https://&lt;sp_public_endpoint>:5000/v3/OS-FEDERATION/domains
        curl -k -X GET -H "X-Auth-Token: &lt;unscoped token>" https://&lt;sp_public_endpoint:5000/v3/OS-FEDERATION/projects</codeblock>
    </section>
    <section><title>Inside Keystone to Keystone Federation</title> K2K federation places a lot of
      responsibilities, and therefore, control at the end user. The complexity is apparent from the
      diagram below. <ul>
        <li>End user must first authenticate to its "home" or local cloud, or local identity
          provider Keystone to obtain a scoped token. </li>
        <li>End user need to find out what service providers (or remote clouds) are available to him
          by querying his local cloud. </li>
        <li>For a given remote cloud, end user must find out which resources are available to him to
          querying the remote cloud the "projects he can scope to". </li>
        <li>In order to talk to the remote cloud, end user must first trade-in, with his local
          cloud, his local scoped token for SAML2 assertion for the remote cloud. </li>
        <li>End user presents the SAML2 assertion to the remote cloud. Remote cloud applies its
          mapping for the incoming SAML2 assertion to map the user to a local ephemeral persona
          (i.e. groups) and issue an unscoped token. </li>
        <li>End user query the remote cloud for the list of project he have access to. </li>
        <li>End user then re-scope its token to a given project. </li>
        <li>End user have access to the resources own by the project.</li>
      </ul>
      <image href="../../media/keystone/Keystone-2-Keystone-Sequence-Generic.png"
        id="image_ldf_njb_mv"/></section>
  </body>
</topic>
