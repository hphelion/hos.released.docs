<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="replacing_controller">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Replacing a Controller Node</title>
  <abstract><shortdesc outputclass="hdphidden">Steps for replacing a controller node in your
      environment.</shortdesc></abstract>
  <body>
    <p conkeyref="HOS-conrefs/applies-to"/>

    <!-- WHEN, WHY -->
    <p>For <keyword keyref="kw-hos-phrase"/> versions, you must have three controller nodes.
      Therefore, adding or removing nodes is not an option. However, if you need to repair or
      replace a controller node, you may do so by following the steps outlined here. Note that to
      run any playbooks whatsoever for cloud maintenance, you will always run the steps from the
      lifecycle manager.</p>
    <p>These steps will depend on whether you are needing to replace a shared lifecycle
      manager/controller node or whether this is a standalone controller node.</p>

    <section id="expandCollapse">
      <sectiondiv outputclass="expandall">Expand All Sections</sectiondiv>
      <sectiondiv outputclass="collapseall">Collapse All Sections</sectiondiv>
    </section>

    <!-- HOW, WHO, WHERE -->
    <section id="notes"><title outputclass="headerH">Notes</title>
      <sectiondiv outputclass="insideSection">
        <p>Do not add entries for a new server; instead, just update the entries for the broken
          one.</p>
        <p>Be aware that all management commands are run on the node where the lifecycle manager is
          running.</p>
      </sectiondiv>
    </section>

    <section id="shared"><title outputclass="headerH">Procedure for Replacing a Shared Lifecycle
        Manager/Controller Node</title>
      <sectiondiv outputclass="insideSection">
        <p>If the controller node you need to replace was also being used as your lifecycle manager
          then use these steps below. If this is not a shared controller then skip to the next
          section.</p>
        <ol>
          <li>Ensuring that you use the same version of HPE Helion OpenStack that you previously had
            loaded on your lifecycle manager, you will need to download and install the lifecycle
            management software using the instructions from the installation guide: <ol>
              <li><xref
                  href="../installation/install_entryscale_kvm.dita#install_kvm/setup_deployer">Set
                  up the Lifecycle Manager</xref></li>
            </ol></li>
          <li>Then you will want to restore your data using the <xref
              href="recovering_controller_nodes.dita#topic_tb4_lqy_qt/deployer">Lifecycle
              Manager Disaster Recovery</xref> instructions.</li>
          <li> Update your cloud model (<codeph>servers.yml</codeph>) with the new
              <codeph>mac-addr</codeph>, <codeph>ilo-ip</codeph>, <codeph>ilo-password</codeph>, or
              <codeph>ilo-user</codeph> fields where these have changed. Do not change the
              <codeph>id</codeph>, <codeph>ip-addr</codeph>, <codeph>role</codeph>, or
              <codeph>server-group</codeph> settings. (Please follow the procedure for updating your
            cloud model in the git repo)</li>
          <li> Get the <b>servers.yml</b> file stored in git:
            <codeblock>cd ~/helion/my_cloud/definition/data
git checkout site</codeblock> then
            change, as necessary, the <codeph>mac-addr</codeph>, <codeph>ilo-ip</codeph>,
              <codeph>ilo-password</codeph>, and <codeph>ilo-user</codeph> fields of this existing
            controller node. Save and commit the change
            <codeblock>git commit -a -m "repaired node X"</codeblock></li>
          <li>Run the configuration processor as follows:
            <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock>
            Then run ready-deployment:
            <codeblock>ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
          </li>
          <li>Once that is complete, copy the Cobbler images to the correct location:
            <codeblock>mkdir /srv/www/cobbler/ks_mirror/hlinux-cattleprod 
cp /opt/hlm_packager/hlm/hlinux/dists/cattleprod/main/installer-amd64/current/images/netboot/debian-installer/amd64/linux /srv/www/cobbler/ks_mirror/hlinux-cattleprod
cp /opt/hlm_packager/hlm/hlinux/dists/cattleprod/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz /srv/www/cobbler/ks_mirror/hlinux-cattleprod</codeblock></li>
          <li>Deploy Cobbler:
              <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost cobbler-deploy.yml</codeblock><note>After
              this step you may see failures because MySQL has not finished syncing. If so, please
              rerun this step (7).</note></li>
          <li>Delete the haproxy user: <codeblock>deluser haproxy</codeblock></li>
          <li>Install the software on your new lifecycle manager/controller node with these three
            playbooks:
            <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts monasca-rebuild-pretasks.yml
ansible-playbook -i hosts/verb_hosts osconfig-run.yml -e rebuild=True --limit=&lt;controller-hostname&gt;
ansible-playbook -i hosts/verb_hosts hlm-deploy.yml -e rebuild=True --limit=&lt;controller-hostname&gt;,&lt;first-proxy-hostname&gt;</codeblock></li>
        </ol>
      </sectiondiv>
    </section>

    <section id="standalone"><title outputclass="headerH">Procedure for Replacing a Standalone
        Controller Node</title>
      <sectiondiv outputclass="insideSection">
        <p>If the controller node you need to replace is not also being used as the lifecycle
          manager then you will use these steps:,</p>
        <ol>
          <li>Log in to the lifecycle manager.</li>
          <li>Update your cloud model, specifically the <codeph>servers.yml</codeph> file, with the
            new <codeph>mac-addr</codeph>, <codeph>ilo-ip</codeph>, <codeph>ilo-password</codeph>,
            and <codeph>ilo-user</codeph> fields where these have changed. Do not change the
              <codeph>id</codeph>, <codeph>ip-addr</codeph>, <codeph>role</codeph>, or
              <codeph>server-group</codeph> settings.</li>
          <li>Commit your configuration to the <xref href="../installation/using_git.dita">local git
              repo</xref>, as follows:
            <codeblock>cd ~/helion/hos/ansible
git add -A
git commit -m "My config or other commit message"</codeblock></li>
          <li>Run the configuration processor:
            <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock></li>
          <li>Update your deployment directory:
            <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
          <li>Remove the old controller node(s) from Cobbler. You can list out the systems in
            Cobbler currently with this command: <codeblock>sudo cobbler system list</codeblock>
            <p>and then remove the old controller nodes with this command:</p>
            <codeblock>sudo cobbler system remove --name &lt;node></codeblock></li>
          <li>Remove the SSH key of the old controller node from the known hosts file. You will
            specify the <codeph>ip-addr</codeph> value: <codeblock>ssh-keygen -f "/home/stack/.ssh/known_hosts" -R &lt;ip_addr></codeblock>
            <p>You should see a response similar to this one:</p>
            <codeblock>stack@helion-cp1-c1-m1-mgmt:~/helion/hos/ansible$ ssh-keygen -f "/home/stack/.ssh/known_hosts" -R 10.13.111.135
# Host 10.13.111.135 found: line 6 type ECDSA
/home/stack/.ssh/known_hosts updated.
Original contents retained as /home/stack/.ssh/known_hosts.old</codeblock></li>
          <li>Run the cobbler-deploy playbook to add the new controller node:
            <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost cobbler-deploy.yml</codeblock></li>
          <li>Image the new node(s) by using the bm-reimage playbook. You will specify the name for
            the node in Cobbler in the command: <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost bm-reimage.yml -e nodelist=&lt;node-name></codeblock>
            <note type="important">You must ensure that the old controller node is powered off
              before completing this step. This is because the new controller node will re-use the
              original IP address.</note></li>
          <li>Configure the necessary keys used for the database etc:
            <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts monasca-rebuild-pretasks.yml</codeblock></li>
          <li>Log into the 2 original controller nodes as "dbadmin" and run the following command:
            <codeblock>ssh-keygen -f "/home/dbadmin/.ssh/known_hosts" -R {{ip_of_node_to_replace}}</codeblock></li>
          <li>Run osconfig on the replacement controller node. For example:
            <codeblock>ansible-playbook -i hosts/verb_hosts osconfig-run.yml -e rebuild=True --limit=&lt;controller-hostname></codeblock>
          </li>
          <li>If the controller being replaced is the Swift ring builder (see <xref
              href="../troubleshooting/objectstorage/identify_ring_builder.dita">Identifying the
              Swift Ring Building Server</xref>) you need to restore the Swift ring builder files to
            the <codeph>/etc/swiftlm/builder_dir</codeph> directory. See <xref
              href="../troubleshooting/objectstorage/recovering_builder_file.dita">Recovering
              Builder Files</xref> for details.</li>
          <li>Run the hlm-deploy playbook on the replacement controller. <p>If the node being
              replaced is the Swift ring builder server then you only need to use the
                <codeph>--limit</codeph> switch for that node, otherwise you need to specify the
              hostname of your Swift ringer builder server and the hostname of the node being
              replaced.</p>
            <codeblock>ansible-playbook -i hosts/verb_hosts hlm-deploy.yml -e rebuild=True --limit=&lt;controller-hostname>,&lt;swift-ring-builder-hostname></codeblock>
            <note type="important">If you receive a RabbitMQ failure when running this playbook,
              review <xref href="recover_rabbit.dita"/> for how to resolve the issue and then re-run
              the hlm-deploy playbook.</note></li>
        </ol>
      </sectiondiv>
    </section>
  </body>
</topic>
