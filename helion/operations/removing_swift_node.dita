<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="remove_swift_node">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Removing a Swift Node</title>
  <body>
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section id="about">
      <p>You can use this process when you want to remove one or more Swift nodes permanently.</p>
      <p>This process has three phases:</p>
      <ul>
        <li>Removing the node's drives from the rings - move data off the node and store it on the
          remaining nodes.</li>
        <li>Disabling Swift on the node - prevent the node from participating in the Swift
          system.</li>
        <li>Removing the node from the input model - the node is removed completely from the
          system.</li>
      </ul>
    </section>

    <section id="steps">
      <title>To Remove a Node's Drive from the Rings</title>
      <p>To remove a node's drives from the rings, change the role of the server that is being
        removed so that it uses that disk model that does not include Swift drives. Then a new ring
        is built and deployed. The new rings will not contain the node's drives.</p>
      <p>
        <ol id="ol_lnw_cdg_pt">
          <li>Edit the definition of the server (usually in the <codeph>data/servers.yml</codeph>
            file). For example, if the entry for the server looks
              like:<codeblock>- name: SWOBJ-DISKS
- id: swobj4
  ip-addr: 192.168.10.5
  role: SWOBJ-ROLE
  server-group: RACK3  
   ...</codeblock><p>Change
              the role to a new value, for example,
              SWOBJ-DRAINING-ROLE:<codeblock>- name: SWOBJ-DISKS
- id: swobj4
  ip-addr: 192.168.10.5
  role: SWOBJ-DRAINING-ROLE
  server-group: RACK3
   ...</codeblock></p></li>
          <li>Edit the <codeph>server-roles</codeph> definition (usually in the
              <codeph>data/server_roles.yml</codeph> file) and add the SWOBJ-DRAINING-ROLE role.
            Keep the interface model of the original SWOBJ-ROLE, but change the disk model to
            SWOBJ-DRAINING-DISKS:<codeblock>- name: SWOBJ-ROLE
  interface-model: INTERFACE_SET_SWOBJ
  disk-model: SWOBJ-DISKS
 
- name: SWOBJ-DRAINING-ROLE
  interface-model: INTERFACE_SET_SWOBJ
  disk-model: SWOBJ-DRAINING-DISKS</codeblock></li>
          <li>Add the new role to the <codeph>server-role</codeph> attribute of either the cluster
            or resources item (depending on context). For example, for a Swift object server, the
            original <codeph>server-role</codeph> attribute looks like: <codeblock>resources:
  - name: swobj
    ...
    server-role: SWOBJ-ROLE
    ...</codeblock>
            <p>Change this to a list containing the original <codeph>SWOBJ-ROLE</codeph> and the new
                <codeph>SWOBJ-DRAINING-ROLE</codeph> as follows:
              <codeblock>resources:
  - name: swobj
    ...
    server-role:
    - SWOBJ-ROLE
    - SWOBJ-DRAINING-ROLE
    ...</codeblock></p></li>
          <li>Create a SWOBJ-DRAINING-DISKS disk model by editing the file containing the
            SWOBJ-DISKS disk model (usually the <codeph>data/swobj_disks.yml</codeph> file) and
            adding an entry for SWOBJ-DRAINING-DISKS. Make a copy of the SWOBJ-DISKS disk model, but
            change the consumer field from <b>swift</b> to <b>swift-draining</b>. For
              example:<codeblock>disk-models:
- name: SWOBJ-DISKS  
  volume-groups:
    - name: hlm-vg
      ...
      consumer:
         name: os
  device-groups:
    - name: swiftobj
      devices:
        - name: /dev/sdb
        - name: /dev/sdc
        - name: /dev/sdd
      consumer:
        name: swift
        attrs:
          rings:
            - object-0
 
- name: SWOBJ-DRAINING-DISKS  
  volume-groups:
    - name: hlm-vg
      ...
      consumer:
         name: os
  device-groups:
    - name: swiftobj
      devices:
        - name: /dev/sdb
        - name: /dev/sdc
        - name: /dev/sdd
      consumer:
        name: swift-draining
        attrs:
          rings:
            - object-0</codeblock><note>Before
              you run any playbooks, remember that you need to export the encryption key in the
              following environment variable: <codeph>export
                HOS_USER_PASSWORD_ENCRYPT_KEY=&lt;encryption key></codeph>. For more information,
              see <xref href="../installation/install_entryscale_swift.dita#install_swift"
            />.</note></li>
          <li>Commit the changes to
            Git:<codeblock>cd ~/helion
git commit -a -m "&lt;commit message>"</codeblock></li>
          <li>Run the configuration
            processor:<codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock></li>
          <li>Create a deployment directory:
            <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
          <li>Validate the changes you've made to the configuration files using the playbook below
            before proceeding further: <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts _swift-validate-input-model.yml --limit SWF*</codeblock>
            <p>If any errors occur, correct them in your configuration files and repeat steps 5-7
              again until no more errors occur before going to the next step.</p>
            <p>For more details on how to interpret and resolve errors, see <xref
                href="../troubleshooting/objectstorage/interpreting_swift_validate_input_model.dita"
                >Interpreting Swift Input Model Validation Errors</xref></p></li>

          <li>Run the <codeph>swift-deploy.yml</codeph> playbook. Do not limit this process to just
            the node (<b>helion-cp1-swobj4</b>) that you are
            draining:<codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts swift-deploy.yml</codeblock></li>
          <li>Wait until replication has finished. For more information, see <xref
              href="../objectstorage/safe_rebalance_deploy_ring.dita"/>.<p>At this stage, all data
              has been moved from <b>helion-cp1-swobj4</b> and replicated on the remaining nodes.
              Now, you can proceed to the next phase.</p></li>
        </ol>
      </p>
    </section>
    <section>
      <title><b>To Disable Swift on a Node</b></title>
      <p>The node is still running Swift services. It is still part of the input model and is fully
        configured so that you can log in and perform the other operations.</p>
      <p>To disable the node, use the following steps. In this example, <b>swobj4</b> is the node
        being removed from Swift.<ol id="ol_lty_22g_pt">
          <li>Stop Swift services on the node using the <codeph>swift-stop.yml</codeph>
              playbook:<codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts swift-stop.yml --limit <b>&lt;hostname></b></codeblock><p>The
              following example uses the <codeph>swift-stop.yml</codeph> playbook to stop Swift
              services on
              <b>helion-cp1-swobj0004</b>:<codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts swift-stop.yml --limit <b>helion-cp1-swobj0004</b></codeblock></p><note>When
              using the <codeph>--limit</codeph> argument, <!--with ansible-playbooks-->you must
              specify the full hostname (for example: <b>helion-cp1-swobj0004</b>) or use the wild
              card * (for example: <b>*swobj4*</b>).</note></li>
          <li>Remove the configuration files. This process assumes you are logged onto the
              Deployer:<codeblock>ssh helion-cp1-swobj4-mgmt sudo rm -R /etc/swift</codeblock><note>Do
              not run any other playbooks until you have finished the process described in <b>To
                Remove a Node from the Input Model</b>. Otherwise, these playbooks may recreate
                <codeph>/etc/swift</codeph> and restart Swift on <b>swobj4</b>. If you accidentally
              run a playbook, simply repeat the process in <b>To Disable Swift on a
            Node</b>.</note></li>
        </ol></p>
    </section>
    <section>
      <title><b>To Remove a Node from the Input Model</b></title>
      <p>Use the following steps to remove a node.<ol id="ol_afc_m2g_pt">
          <li>Edit the servers list (usually in <codeph>data/servers.yml</codeph> file). Remove the
            entry for the node (<b>swobj4</b> in this example).</li>
          <li>If this was a SWPAC node, reduce the member-count attribute by 1 in the
              <codeph>control-planes</codeph> definition (usually in the
              <codeph>data/control_plane.yml</codeph> file). For SWOBJ nodes, no such action is
            needed.</li>
          <li>Commit the changes to
            Git:<codeblock>cd ~helion
git commit -a -m "&lt;commit message>"</codeblock></li>
          <li>Run the configuration processor:<codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock>
            <p>You may want to use the <codeph>remove_deleted_servers</codeph> and
                <codeph>free_unused_addresses</codeph> switches to free up the resources when
              running the configuration processor. See <xref
                href="../input_model.dita#input_model/persisteddata">Persisted Data</xref> for more
              details.</p>
            <codeblock>ansible-playbook -i hosts/localhost config-processor-run.yml -e remove_deleted_servers="y" -e free_unused_addresses="y"</codeblock></li>
          <li>Create a deployment
            directory:<codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
          <li>Validate the changes you've made to the configuration files using the playbook below
            before proceeding further: <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts _swift-validate-input-model.yml --limit SWF*</codeblock>
            <p>If any errors occur, correct them in your configuration files and repeat steps 3-5
              again until no more errors occur before going to the next step.</p>
            <p>For more details on how to interpret and resolve errors, see <xref
                href="../troubleshooting/objectstorage/interpreting_swift_validate_input_model.dita"
                >Interpreting Swift Input Model Validation Errors</xref></p></li>
          <li>Remove the node from
            Cobbler:<codeblock>sudo cobbler system remove --name=swobj4
ansible-playbook -i hosts/localhost cobbler-deploy.yml</codeblock></li>
          <li>The final step will depend on what type of Swift node you are removing. <p>If the node
              was a SWPAC node, run the <codeph>hlm-deploy.yml</codeph> playbook:</p>
            <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts hlm-deploy.yml</codeblock>
            <p>If the node was a SWOBJ node, run the <codeph>swift-deploy.yml</codeph> playbook:</p>
            <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts swift-deploy.yml</codeblock>
          </li>
          <li>Wait until replication has finished. For more details, see <xref
              href="../objectstorage/safe_rebalance_deploy_ring.dita"/>.</li>
          <li>You may need to continue to rebalance the rings. For instructions, see <b>Final
              Rebalance Phase </b> at <xref
              href="../objectstorage/input_model_change_existing_rings.dita#topic_vyp_cft_4t"
            />.</li>
        </ol></p>
    </section>
  </body>
</topic>
