<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_sym_ms4_xv">
  <title><keyword keyref="kw-hos-phrase-21"/>: Deploying Updated TLS Certs to Change Public
    Endpoints</title>
  <body>
    <p>If you have deployed your <keyword keyref="kw-hos-phrase-21"/> cloud and you have fixed IP
      addresses for your public endpoints which are specified in your corresponding TLS
      certificates, this document will show you how to update your public endpoints and TLS certs to
      use a domain name.</p>
    <note type="warning">There will be API downtime while this process is completed. It is
      recommended to give any users of your API a notice of this downtime. The API will be down for
      the time it takes you to complete steps #6 - 9 below.</note>

    <section id="prereq"><title>Prerequisites</title>
      <p>You should obtain a TLS certificate that specifies
          <codeph>subjectAltName=&lt;DNS:&lt;dns_name></codeph></p>
    </section>

    <section id="steps"><title>How to add your updated TLS certificate and deploy it in your
        environment</title>
      <ol>
        <li>Log in to the lifecycle manager.</li>
        <li>Save the details of your public endpoints as they currently exist before you begin
          making changes: <ol>
            <li>Source the keystone admin credentials:
              <codeblock>source ~/keystone.osrc</codeblock></li>
            <li>This command will list the details of your public endpoints and save them in a file
              with path <codeph>~/public_endpoints.orig</codeph>:
              <codeblock>openstack endpoint list --interface public | tail -n +4 | head -n -1 | tee ~/public_endpoints.orig</codeblock></li>
          </ol>
        </li>
        <li>Copy your new certificate and then update your cloud configuration to specify the new
          cert: <ol>
            <li>Place your new TLS certificate in this directory:
              <codeblock>~/helion/my_cloud/config/tls/certs</codeblock></li>
            <li>If your new certificate has been signed by a different entity than the old one then
              ensure that you update the CA cert chain by replacing the contents of
                <codeph>~/helion/hos/ansible/roles/tls-trust/files/frontend_cacert.pem</codeph> with
              the new CA certificate chain file. <note>Since the CA certificate chain is essentially
                a public key and will be installed on all clients, take care that you don't
                accidently copy the contents of the certificate (which contains the private key)
                itself into the<codeph> frontend_cacert.pem</codeph> file.</note></li>
            <li>Edit your <codeph>network_groups.yml</codeph> file to specify your the FQDN you'll
              be using as well as the path to your new certificate. <p>Path to file:</p>
              <codeblock>~/helion/my_cloud/definition/data/network_groups.yml</codeblock>
              <p>Edit the <codeph>external-name</codeph> line to specify your FQDN and the
                  <codeph>cert-file</codeph> line to specify the name of your cert, bolded example
                below:</p>
              <codeblock><b>external-name: &lt;FQDN></b>

tls-components
  - default
roles
  - public
<b>cert-file: &lt;cert_name></b></codeblock></li>
            <li>Commit the changes to git:
              <codeblock>git add -A
git commit -a -m "updating TLS cert"</codeblock></li>
          </ol>
        </li>
        <li>Deploy your updated certificate to your cloud environment: <ol>
            <li>Run the configuration processor:
              <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock></li>
            <li>Update your deployment directory:
              <codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
          </ol>
        </li>
        <li>Prepare for the creation of your new endpoints with these steps:<ol>
            <li>Copy your original public endpoints to a new file which you will use to create your
              new endpoints:
              <codeblock>cp ~/public_endpoints.orig ~/public_endpoints.new</codeblock></li>
            <li>Edit the <codeph>~/public_endpoints.new</codeph> file to replace the old IP address
              with the FQDN from your cert. You can automate this by using this command, altering
              the old IP address and FQDN to fit your environment:
              <codeblock>sed -i "s/&lt;old_IP_address>/&lt;FQDN>/g" ~/public_endpoints.new</codeblock></li>
          </ol>
        </li>
        <li>Run this playbook, which will push the certificate to your hosts and reconfigure/restart
          HAProxy:
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts FND-CLU-deploy.yml</codeblock></li>
        <li>Deploy the CA chain, if necessary:
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts horizon-deploy.yml</codeblock></li>
        <li>Delete your existing public
          endpoints:<codeblock>awk '{ print "openstack endpoint delete " $2}' ~/public_endpoints.orig | tee ~/delete_endpoints
source ~/delete_endpoints</codeblock></li>
        <li>Recreate the public
          endpoints:<codeblock>awk '{ print "openstack endpoint create --region " $4 " " $6 " public \42" $14 "\42"}' ~/public_endpoints.new| tee ~/create_endpoints
source ~/create_endpoints</codeblock></li>
        <li>Complete the deployment by reconfiguring the compute service:
          <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts nova-reconfigure.yml</codeblock></li>
      </ol>
    </section>
  </body>
</topic>
