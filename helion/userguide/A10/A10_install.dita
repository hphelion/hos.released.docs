<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="A10_install">
  <title>Install and Configure the A10 Driver</title>
  <body>
    <p>This document describes how Helion third-party hardware testers have successfully integrated A10 Networks' load-balancing-as-a-service (LBaaS) with Helion OpenStack. After meeting all of the hardware and network requirements, you can install and configuring the driver. When you have completed these steps, you can move on to verifying integration.</p>

    <p>To integrate A10 Networks LBaaS with Helion:</p>
      <ol>
        <li><xref type="section" href="#A10_install/A10_dwnld_files">Download the A10 driver</xref></li>
        <li><xref type="section" href="#A10_install/A10_extract">Extract and install the files</xref></li>
        <li><xref type="section" href="#A10_install/A10_config_CN">Configure controller nodes</xref></li>
        <li><xref type="section" href="#A10_install/A10_set_default">Set A10 as default LBaaS provider</xref></li>
      </ol> 
    <note type="attention">Steps 1-3, Downloading the driver, Extracting and installing the files, and Configuring the controller nodes, need to be repeated on all controller nodes to get the A10 driver installed and running.</note>
      
      <section id="A10_dwnld_files">
        <title>Download the A10 Driver</title>
        <p>To get the most recent A10 neutron-lbaas driver, you must go through github. In these steps, to prevent conflicts, all files are downloaded from the Python Package Index (pyPI) site. PyPI is a repository of software for the Python programming language. For more information, see <xref href="https://pypi.python.org/pypi" scope="external" format="html">The Python Package Index</xref>.</p>
          
        <p>After you extract the relevant files you need to place them in a Neutron virtual environment. This means creating a directory in the <codeph>~/scratch</codeph> folder. This allows you to install the third-party driver into a virtual environment. For more detail, see the <xref href="http://docs-staging.hpcloud.com/hos.docs-hos-30/#helion/operations/thirdparty_driver_support.html" scope="external" format="html" >Third Party Driver Support</xref> website.</p>
        
        <p>To download the A10 files:</p>
        <ol>
          <li>To create a directory for the A10 files you will download, run:
          <codeblock>cd ~/scratch
mkdir pkg</codeblock></li>
            <li>To clone the repository into the new directory, run:
          <codeblock>cd ~/scratch/pkg
git clone https://github.com/a10networks/a10-neutron-lbaas.git</codeblock></li>
            <li>To create a directory you will use to install the A10 driver into a virtual
          environment, run: <codeblock>cd ~/scratch
mkdir third-party-wheelhouse</codeblock></li>
          <li>To set the export proxy before installing, use the example command with values from
          your deployment. <p>For
          example,</p><codeblock>export http_proxy=http://10.1.24.18:8080</codeblock></li>
            <li>To build wheel archives for the requirements and dependencies, run:
            <codeblock>pip wheel --wheel-dir third-party-wheelhouse pkg/a10-neutron-lbaas</codeblock><note
            type="attention">If building the wheel archives doesn’t work, make sure you have
            configured the export proxy and then move on to the last step.</note></li>
            <li>To create multiple files with extension “.whl” based on the dependency packages, run:
            <codeblock>pip wheel --proxy=$http_proxy --wheel-dir third-party-wheelhouse pkg/a10-neutron-lbaas</codeblock></li>
        </ol>
        <note type="attention">The steps in this section need to be repeated on all controller nodes to get the A10 driver installed and running.</note>
      </section>

    <section id="A10_extract">
      <title>Extract and Install the Files</title>
      <p>In these steps you will create a virtual environment. This is something you can use to create an isolated Python development environment. This helps isolate your dependencies, especially when used with pip. The <codeph>pip</codeph> command installs the A10 driver from PyPI.</p>
    <p>To extract and install the PyPI package:</p>
    <ol>
      <li>To create a temporary folder for A10, run:
          <codeblock>cd ~/scratch
mkdir a10temp</codeblock></li>
        <li>To create the virtual environment for the a10temp folder, run:.
        <codeblock>sudo virualenv a10temp</codeblock></li>
        <li>To activate the virtual environment, run:
          <codeblock>cd ~/scratch/a10temp
source bin/activate</codeblock></li>
        <li>To install the wheel files using pip, run:
          <codeblock>sudo pip install ../third-party-wheelhouse/requests-2.9.1-py2.py3-none-any.whl
sudo pip install ../third-party-wheelhouse/hash_ring-1.3.1-py2-none-any.whl
sudo pip install ../third-party-wheelhouse/acos_client-1.3.3-py2-none-any.whl
sudo pip install ../third-party-wheelhouse/a10_neutron_lbaas-1.4.3alpha-py2-none-any.whl    </codeblock></li>
        <li>To go to the Python package distribution directory, run:
        <codeblock>cd /usr/local/lib/python2.7/dist-packages/</codeblock></li>
      <li>To compress all the files into tar file with a name of <codeph>a10-driver.tar</codeph>, run:
        <codeblock>sudo tar –cvf a10-driver.tar</codeblock></li>
        <li>To change the permissions to the default user, run:
        <codeblock>sudo chown stack:stack a10-driver.tar</codeblock></li>
        <li>To copy the tar file to all the controller nodes, run:
          <codeblock>scp a10-driver.tar stack@10.2.1.6
scp a10-driver.tar stack@10.2.1.7
scp a10-driver.tar stack@10.2.1.8</codeblock></li>
    </ol>
      <note type="attention">The steps in this section need to be repeated on all controller nodes to get the A10 driver installed and running.</note>
</section>

    <section id="A10_config_CN">
      <title>Configure Controller Nodes</title>
      <p>To Configure the controller nodes:</p>
      <ol>
        <li>To activate the virtual environment, run:
          <codeblock>cd /opt/stack/service/neutron/venv
source bin/activate</codeblock></li>
        <li>To extract files in the <codeph>a10-driver.tar</codeph> format, run:
          <codeblock>cd lib/python2.7/site-packages
tar –xvf /home/stack/a10-driver.tar .</codeblock></li>
          <li>To check the drivers list and verify A10 drivers are installed, run:
          <codeblock>pip list</codeblock></li>
          <li>To create an a10 directory, run:
          <codeblock>cd /opt/stack/service/neutron/venv/etc
mkdir a10</codeblock></li>
          <li>To create a file with name “config.py” in the a10 directory, run:
          <codeblock>cd a10
sudo vi config.py</codeblock></li>
          <li>To add device configuration details to the config.py file, type the following text in
          the same command line window you used for the <codeph>cat</codeph>command:
          <codeblock>          devices = {
          "ax1": {
          "name": "ax1",
          "host": "10.2.1.254",
          "port": 443,
          "username": "admin",
          "password": "a10",
          "status": True,
          "autosnat": False,
          "api_version": "2.1",
          "v_method": "LSI",
          "max_instance": 5000,
          "use_float": False,
          "method": "hash",
          "max_partitions": 10,
          "per_partition_lif_max": 10,
          "peer_mgmt_ip": "",
          "peer_mgmt_port": "",
          "vlan": 0,
          "gateway_mode": 1,
          }
          }    </codeblock></li>
      </ol>
      <note type="attention">The steps in this section need to be repeated on all controller nodes to get the A10 driver installed and running.</note>
    </section>

    <section id="A10_set_default">
      <title>Set A10 as Default LBaaS Provider</title>
      <p>Adding the service_provider element to neutron_lbaas.conf file tells Neutron LBaaS that there is an LBaaS provider, its name, and where you can find it. When you start up the neutron-server, it imports the drivers to ensure they are available and cached.</p>
      <ol>
        <li>Log in to the lifecycle manager (deployer node).</li>
        <li>To open the following file in a text editor, run:
        <codeblock>/home/stack/helion/my_cloud/config/neutron/neutron.conf.j2</codeblock></li>
        <li>Find the following service provider entry:
          <codeblock>LOADBALANCER:Haproxy</codeblock></li>
        <li>If you do not want to provide access to the HAProxy driver, delete the line containing
          the following entry: <codeblock>LOADBALANCER:Haproxy</codeblock></li>
        <li>If you do want to provide access to the HAProxy driver, delete the following tag from
          the end of the line: <codeblock>:default</codeblock><note type="caution">Only remove the
            ":default" tag for the HAPROXY line. The VPN line should have a ":default" tag at the
            end. If this is not configured correctly you will have issues getting the neutron-server
            service up and running.</note></li>
        <li>In the neutron.conf file you have open, add the following line:
            <codeblock>service_provider = LOADBALANCERV2:A10Networks:neutron_lbaas.drivers.a10networks.driver_v2.ThunderDriver:default</codeblock></li>
       <li>Ensure your file is similar to the following sample of a working neutron.conf file:
        <codeblock>[service_providers]
        service_provider = LOADBALANCERV2:Haproxy:neutron_lbaas.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver     
# To enable LBaaSv1, comment the above service_provider line and uncomment the below
# service_provider = LOADBALANCER:Haproxy:neutron.services.loadbalancer.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default
        service_provider = VPN:openswan:neutron_vpnaas.services.vpn.service_drivers.ipsec.IPsecVPNDriver:default
        service_provider = LOADBALANCERV2:A10Networks:neutron_lbaas.drivers.a10networks.driver_v2.ThunderDriver:default</codeblock></li>
        <li>To commit and apply the changes, follow the steps in <xref href="https://docs.hpcloud.com/#helion/installation/using_git.html" scope="external" format="html">HPE Helion Openstack: Using Git for Configuration Management.</xref> </li>
        <li>To verify the A10 service provider is working, run:
          <codeblock>neutron service-provider-list
#Sample output
stack@helion-cp1-c0-m1-mgmt:~$neutron service provider list
+-----------------------------------------+
| service type    | name        | default |
+-----------------+-------------+---------+
| VPN             | openswan    | True    |
| LOADBALANCERV2  | a10networks | True    |
| LOADBALANCERV2  | haproxy     | False   |
+-----------------+-------------+---------+</codeblock>
        </li>
      </ol>
    </section>


  </body>
</topic>
