<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_srg_gsl_2v">
  <title>Configuring Maximum Transmission Units in Neutron</title>
  <body>
    <note type="danger">This document is still under development</note>
   <section><title>Overview</title>
      <p>A Maximum Transmission Unit, or MTU is the maximum packet size (in bytes) that a network
        device can or is configured to handle. There are a number of places in HPE Helion OpenStack
        where MTU configuration is relevant: the physical interfaces managed and configured by
        Helion OpenStack, the virtual interfaces created by Neutron and Nova for Neutron networking,
        and the interfaces inside the VMs.</p>
      <b>Helion OpenStack-managed physical interfaces </b><p>Helion OpenStack-managed physical
        interfaces include the physical interfaces and the bonds, bridges, and VLANs created on top
        of them. The MTU for these interfaces is configured via the 'mtu' property of a network
        group. Because multiple network groups can be mapped to one physical interface, there may
        have to be some resolution of differing MTUs between the untagged and tagged VLANs on the
        same physical interface. For instance, if one untagged VLAN, vlan101 (with an MTU of 1500)
        and a tagged VLAN vlan201 (with an MTU of 9000) are both on one interface (eth0), this means
        that eth0 can handle 1500, but the VLAN interface which is created on top of eth0 (i.e.
        vlan201@eth0) wants 9000. However, vlan201 can't have a higher MTU than eth0, so vlan201
        will be limited to 1500 when it is brought up, and additional fragmentation will be a
        result.</p>
      <p>In general, a VLAN interface MTU must be lower than or equal to the base device MTU. If
        they are different, as in the case above, the MTU of eth0 can be overridden and raised to
        9000, but in any case the discrepancy will have to be reconciled. </p>
      <b>Neutron/Nova interfaces </b>
      <p>Neutron/Nova interfaces include the virtual devices created by Neutron and Nova during the
        normal process of realizing a Neutron network/router and booting a VM on it (qr-*, qg-*,
        tap-*, qvo-*, qvb-*, etc.). There is currently no support in Neutron/Nova for per-network
        MTUs in which every interface along the path for a particular Neutron network has the
        correct MTU for that network. There is, however, support for globally changing the MTU of
        devices created by Neutron/Nova (see network_device_mtu below). This means that if you want
        to enable jumbo frames for any set of VMs, you will have to enable it for all your VMs. You
        cannot just enable them for a particular Neutron network. </p>
      <b>VM interfaces</b>
      <p>VMs typically get their MTU via
        <?oxy_insert_start author="michelln" timestamp="20160302T165810-0500"?>DHCP<?oxy_insert_end?><?oxy_delete author="michelln" timestamp="20160302T165807-0500" content="dhcp"?>
        advertisement, which means that the dnsmasq processes spawned by the neutron-dhcp-agent
        actually advertise a particular MTU to the VMs.
        <?oxy_delete author="michelln" timestamp="20160302T165839-0500" content="Currently (HOS"?><?oxy_insert_start author="michelln" timestamp="20160302T165858-0500"?>
        In Helion OpenStack<?oxy_insert_end?> 2.0, the DHCP server advertises to all
        VMS<?oxy_delete author="michelln" timestamp="20160302T165911-0500" content="are"?> a 1400
        MTU via a forced setting in dnsmasq-neutron.conf. This is suboptimal for every network type
        (vxlan, flat/VLAN, etc) but it does prevent fragmentation of a
        VM<?oxy_insert_start author="michelln" timestamp="20160302T170012-0500"?>'<?oxy_insert_end?>s
        packets due to encapsulation. </p>
      <p>For instance, if you set the new *-mtu configuration options to a default of 1500 and
        create a VXLAN network, it will be given an MTU of 1450 (with the remaining 50 bytes used by
        the VXLAN encapsulation header) and will advertise a 1450 MTU to any VM booted on that
        network. If you create a provider VLAN network, it will have an MTU of 1500 and will
        advertise 1500 to booted VMs on the network. It should be noted that this default starting
        point for MTU calculation and advertisement is also global, meaning you can't have an MTU of
        8950 on one VXLAN network and 1450 on another. However, you can have provider physical
        networks with different MTUs by using the physical_network_mtus config option, but Nova
        still requires a global MTU option for the interfaces it creates, thus you can't really take
        advantage of that config option. </p>
    </section>
    <section><title>Netwok settings in the HPE Helion OpenStack input model</title>MTU can be set as
      an attribute of a network group in network_groups.yml. That setting means that every network
      in the network group will be assigned the specified MTU. The MTU value must be set
      individually for each network group. For example:
      <codeblock>network-groups:
    - name: GUEST
      mtu: 9000
      ...
        
    - name: EXTERNAL-API
      mtu: 9000
      ...
        
    - name: EXTERNAL-VM
      mtu: 9000
      ... </codeblock>
    </section>
    <section><title>Infrastructure support for jumbo frames</title>
    <p>If you want to use jumbo frames, or frames with an MTU of 9000 or more, the physical switches
        and routers that make up the infrastructure of the Helion installation must be configured to
        support them. To realize the advantages, generally all devices in the same broadcast domain
        must have the same MTU. </p>
      <p>If you want to configure jumbo frames on compute and controller nodes, then all switches
        joining the compute and controller nodes must have jumbo frames enabled. Similarly, the
        "infrastructure gateway" through which the external VM network flows, commonly known as the
        default route for the external VM VLAN, must also have the same MTU configured. </p>
      <p> You can also consider anything in the same broadcast domain to be anything in the same
        VLAN or anything in the same IP subnet. </p>
    </section> 
    <section><title><?oxy_insert_start author="michelln" timestamp="20160302T171404-0500"?>E<?oxy_insert_end?><?oxy_delete author="michelln" timestamp="20160302T171403-0500" content="e"?>nabling
        end-to-end jumbo frames for a VM</title> 
      <ol>
     <li>Add an 'mtu' attribute to all the network groups in your model. Note that adding the MTU
          for the network grops will only affect the configuration for physical network
          intefaces.<p/>To add the mtu attribute, edit network_groups.yml, which is found in
          ~/helion/my_cloud/definition/data/, along with
          ~/helion/my_cloud/config/neutron/dhcp_agent.ini.j2,
          ~/helion/my_cloud/config/neutron/l3_agent.ini.j2, and
          ~/helion/my_cloud/config/nova/nova.conf.j2 <p/>To edit these files, begin by checking out
          the <b>site</b> branch on the lifecycle manager node. You may already be on that branch.
          If so, you will remain there.<codeblock>git checkout site</codeblock>Then begin editing
          the files. In network_groups.yml, add mtu:
          9000<codeblock>network-groups:
   - name: HLM that this will change ...................
     hostname-suffix: hlm
     mtu: 9000
     component-endpoints:
   - lifecycle-manager
   - lifecycle-manager-target</codeblock>
          This will set the MTU of the physical interfaces managed by HPE Helion OpenStack. </li> <li>Next, edit the layer 2 agent config file, ml2_conf.ini.j2, found in
          ~/helion/my_cloud/config/neutron/ to set the path_mtu and segment_mtu variables under
          [ml2]: (modular layer 2)
          <codeblock>[ml2]
 ...
 path_mtu = 9000
 segment_mtu = 9000</codeblock> This changes the
          MTU value that will be advertised to VMs, based upon the network type. </li> <li>Next, edit neutron.conf.j2  found in ~/helion/my_cloud/config/neutron/to set advertise_mtu (to
          true) under [DEFAULT]: <codeblock>[DEFAULT]
 ...
 advertise_mtu = True</codeblock> This
          allows Neutron to advertise the optimal MTU to instances (based upon path_mtu minus the
          encapsulation size). Remove the "dhcp-option-force=26,1400" line from
          ~/helion/my_cloud/config/neutron/dnsmasq-neutron.conf.j2. </li> <li>Edit each of the following files:<ul>
            <li>~/helion/my_cloud/config/neutron/dhcp_agent.ini.j2 </li>
            <li>~/helion/my_cloud/config/neutron/l3_agent.ini.j2 </li>
            <li>~/helion/my_cloud/config/nova/nova.conf.j2 </li>
          </ul> to set the network_device_mtu variable under [DEFAULT]:
          <codeblock>[DEFAULT]
 ...
 network_device_mtu = 9000</codeblock>This tells the dhcp agent,
          l3 agent, and Nova to create new network devices with that particular MTU. </li> <li>If HPE Helion OpenStack has already been deployed, follow the procedure to commit this new
          configuration:
          <codeblock>git add -A
git commit -m "your commit message goes here in quotes"</codeblock>run
          the configuration
          processor:<codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/verb_hosts config-processor-run.yml</codeblock>and
          ready the
          deployment:<codeblock>ansible-playbook -i hosts/verb_hosts ready-deployment.yml</codeblock>Then
          run the osconfig-run.yml
          playbook:<codeblock>ansible-playbook -i hosts/verb_hosts osconfig-run.yml </codeblock>followed
          by the
          nova-reconfigure.yml:<codeblock>ansible-playbook -i hosts/verb_hosts nova-reconfigure.yml </codeblock>Then
          run neutron-reconfigure.yml:
          <codeblock>ansible-playbook -i hosts/verb_hosts neutron-reconfigure.yml</codeblock>Note:
          adding/changing network-group mtu settings will likely require a network restart during
          osconfig-run. </li>

        <li>If HPE Helion OpenStack hasn't been deployed yet, simply make sure these config changes
          have been committed before running the typical deployment procedure.
          <codeblock>git add -A
git commit -m "your commit message goes here in quotes"</codeblock></li>
        <li>Follow the normal process for creating a neutron network and booting a VM or two. In
          this example, if a vxlan network is created and a VM is booted on it, the VM will have an
          MTU of 8950, with the remaining 50 bytes used by the VXLAN encapsulation header.</li>
        <li>Test and verify that the VM can send and receive jumbo frames without fragmentation. </li>
      </ol></section>
  
  </body>
</topic>
