<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd" >
<topic xml:lang="en-us" id="HP2.0DNSaaS">
  <title><ph conkeyref="HOS-conrefs/product-title"/>DNSaaS Installation and Configuration</title>
  <body>
    <p conkeyref="HOS-conrefs/applies-to"/>
    <p>Our managed DNS service, based on the OpenStack Designate project, is engineered to help you
      create, publish, and manage your DNS zones and records securely and efficiently for either a
      public or private DNS server network.</p>
    <section id="Prerequisites">
      <title>Prerequisites</title>
      <ul>
        <li><keyword keyref="kw-hos-phrase"/> installation must be completed. You must know the
          location of its <codeph>keystone.osrc</codeph> file, which contains configuration
          information.</li>
        <li>You must know the NTP server and DNS server IP addresses.</li>
        <li>Credentials of the User and Tenant where the service is to be deployed ("Target
          Credentials")</li>
        <li>"openrc" credentials file for the Target user and project
          <!--why this file?: the values don't seem to be used anywhere in the process?--></li>
        <li>The v2 CLI must be installed on all nodes due to client differences.</li>
        <li>The SVC network correctly configured within <keyword keyref="kw-hos"/>. See the <xref
            href="http://docs.hpcloud.com/#helion/administration/create_hdp_servicenet.html"
            format="html" scope="external">Creating the HPE Helion Development Platform Service
            Net</xref> for information on setting up the network. <note type="important">The DNSaaS
            installation requires that the svc network be named "SVC". User defined names for the
            SVC network are currently not supported. </note></li>
        <li>A SSH public and private keypair.</li>
        <li><note type="important">Selecting a flavor larger than m1.medium for the Deployer or
            Control Plane nodes fails due to a failure to re-size LVM. The recommended flavors for
            the Deployer and Control Plane nodes are m1.small or m1.medium.</note></li>
      </ul>
    </section>

    <section id="PrerequisiteCredentials">
      <title>Creating the Prerequisite Credentials</title>
      <p>Target credentials are the credentials of the user and project where the service is to be
        deployed. Target credentials include a project name and a username. Service credentials can
        only be created after the Target credentials have been successfully created. </p>
      <ol>
        <li>Log in to the lifecycle manager.</li>
        <li>Source the keystone.osrc file. <codeblock>source ~/keystone.osrc</codeblock></li>
        <li>Create the DNSaaS project. Make a note of the ID field value as it will be used in later commands.<codeblock>openstack project create dnsaas</codeblock>
          <p>The output should look similar to this:</p>
          <codeblock>+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description |                                  |
| domain_id   | default                          |
| enabled     | True                             |
| id          | 5f33236dbfcb40b4a54662c22e2563c3 |
| name        | dnsaas                           |
+-------------+----------------------------------+</codeblock></li>
        <li>Create a dnsaas user, specifying a unique password.<codeblock>openstack user create dnsaas --password &lt;password> --email dnsaas@example.com --project dnsaas</codeblock>
          <p>The output should look similar to this:</p>
          <codeblock>+--------------------+----------------------------------+
| Field              | Value                            |
+--------------------+----------------------------------+
| default_project_id | 5f33236dbfcb40b4a54662c22e2563c3 |
| domain_id          | default                          |
| email              | dnsaas@example.com               |
| enabled            | True                             |
| id                 | 90839cc6655d405783f5e0c3fa7b7bfc |
| name               | dnsaas                           |
+--------------------+----------------------------------+</codeblock></li>
        <li>Add roles to the dnsaas user.
          <codeblock>openstack role add --project dnsaas --user dnsaas _member_
openstack role add --project dnsaas --user dnsaas admin</codeblock></li>
      </ol>
    </section>

    <section id="CredentialsFile">
      <title>DNSaaS User and Project Credentials</title>
      <p>Create a credentials files for the DNSaaS user and project. This will be used in later
        steps.</p>
      <ol>
        <li>Log in to the lifecycle manager.</li>
        <li>Using your preferred editor, create a file named <codeph>dnsaas.osrc</codeph> in your
          home directory with the contents below, ensuring that you replace
            <codeph>&lt;password></codeph> with the password you chose earlier.<codeblock>unset OS_DOMAIN_NAME
export OS_IDENTITY_API_VERSION=3
export OS_AUTH_VERSION=3
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_ENDPOINT_TYPE=internalURL
export OS_INTERFACE=internal
export OS_CACERT=/etc/ssl/certs/ca-certificates.crt
export OS_PROJECT_NAME=dnsaas
export OS_USERNAME=dnsaas
export OS_PASSWORD=&lt;password>
export OS_AUTH_URL=&lt;auth URL></codeblock>
          <note type="important">For <codeph>OS_AUTH_URL</codeph> you should use the same value for
            this key that you have in your <codeph>~/service.osrc</codeph> file.</note></li>
      </ol>
    </section>

    <section id="ProvisionDNSaaSImages">
      <title>Provision DNSaaS Images</title>
      <p>You will need to select which way you would like to provision the images for DNSaaS into
        your Helion instance.</p>
      <p><b>Automatic - Using the Images and Updates extension</b></p>
      <ol>
        <li>Log in to your Horizon dashboard using the DNSaaS credentials you created above. See
            <xref href="../operations/accessing_horizon.dita"/> for details on how to do this if
          needed</li>
        <li>Navigate to the <codeph>Update and Extensions panel</codeph>.</li>
        <li>If you have not already configured Horizon with your credentials to access the Helion
          Download Network, then click the <b>Configure</b> button and enter your credentials there.
          See <xref href="../operations/accessing_sherpa.dita"/> for more details.</li>
        <li>You should see a listing for <b>DNS Service 2.0.0</b> here. Click the Download button to
          begin downloading this extension.</li>
        <li>Once the download has completed, select the <b>Publish</b> button to install the
          extension. <note>It's best to do this from within the tenant you plan on deploying DNSaaS
            with, as the images are uploaded as private to the tenant you're logged in with during
            the time of publication.</note></li>
      </ol>
      <p>Once the state goes into <b>Installed</b>, the images needed will be pre-uploaded into the
        image service (Glance). The DNSaaS deployer tarball gets uploaded to a Swift container
        called <codeph>dnsaas-deployer</codeph> for you to download.</p>
      <p>To download the tarball from swift you can use the SwiftClient using this steps:</p>
      <ol>
        <li>Source your creds: <codeblock>source ~/dnsaas.osrc</codeblock></li>
        <li>Download the Swift container: <codeblock>swift download dnsaas-deployer</codeblock>
          <p>The ouput should look like this:</p>
          <codeblock>$ swift download dnsaas-deployer
dnsaas-2.0.0-20151105T142709Z.tar [auth 0.239s, headers 0.331s, total 2.531s, 128.633 MB/s]</codeblock></li>
        <li>Confirm you have the DNS installer tarball on your system by using
          <codeph>ls</codeph>.</li>
      </ol>
      <p><b>Manual - Download and provision images to your cloud.</b></p>
      <ol>
        <li>Navigate to the <xref scope="external" format="html"
            href="https://helion.hpwsportal.com/catalog.html#/Home/Show"> HPE Helion Download
            Network (HDN)</xref> and log in. If necessary, create an account first. Select the
          required package and download the DNSaaS Installer <i>csu</i> file to your local
          directory. <p>Unzip the <i>csu</i> to extract the <i>deployer</i> and cloud image tar
            ball.</p>
          <note>On Windows, for example, things may be pigeonholed into <codeph>.zip</codeph> is
              <codeph>Zip</codeph> and <codeph>.csu</codeph> is <codeph>Unknown</codeph>. So
            renaming the <codeph>.csu</codeph> file to <codeph>.zip</codeph> will possibly make it
            work with the unzip utility of choice.</note></li>
      </ol>
    </section>

    <section id="PreparingTheDeployer">
      <title>Prepare the DNSaaS Installer</title>
      <sectiondiv>
        <p><b>Preparing to boot the DNS Installer Virtual Machine</b></p>
        <p>You must publish the DNSaaS Cloud Image to the target project/tenant before proceeding to
          the next step. </p><ol>
          <li>Update your environment. <codeblock>$ source dnsaas.osrc</codeblock></li>
          <li>Identify the Service Network UIID. Make a note of the <codeph>id</codeph> value. If
            you don't already have a Service Network created, see <xref
              href="../administration/create_hdp_servicenet.dita"/> for more details. <codeblock>neutron net-show SVC</codeblock>
            <p>Here is an example output, with the UUID bolded:</p>
            <codeblock>$ neutron net-show SVC
+---------------------------+--------------------------------------+
| Field                     | Value                                |
+---------------------------+--------------------------------------+
| admin_state_up            | True                                 |
| id                        | <b>e14bf7c2-d322-4bc2-8fe7-50d1b8c132d7</b> |
| mtu                       | 0                                    |
| name                      | SVC                                  |
| provider:network_type     | vlan                                 |
| provider:physical_network | physnet1                             |
| provider:segmentation_id  | 2754                                 |
| router:external           | False                                |
| shared                    | False                                |
| status                    | ACTIVE                               |
| subnets                   | 8c0f40e1-1826-44f6-90bf-d40f8f6d8819 |
| tenant_id                 | 0253f33f56f74e9ea4d48281b5d64430     |
+---------------------------+--------------------------------------+</codeblock></li>
          <li>Create a keypair. <codeblock>nova keypair-add dns-shared</codeblock></li>
          <li>Save the private key portion of the keypair that displays in a file locally named
              <codeph>dns-shared.pub</codeph></li>
          <li>Ensure the <codeph>default</codeph> security group is correctly configured. You will
            need your Project (Tenant) ID value for your <codeph>dnsaas</codeph> project. <ol>
              <li>List your current security groups and their rules in order to get the ID for your
                  <codeph>default</codeph> security group: <codeblock>neutron security-group-list --tenant-id &lt;project ID></codeblock>
                <p>Here is an example output:</p>
                <codeblock>$ neutron security-group-list --tenant-id 5f33236dbfcb40b4a54662c22e2563c3
+--------------------------------------+---------+----------------------------------------------------------------------+
| id                                   | name    | security_group_rules                                                 |
+--------------------------------------+---------+----------------------------------------------------------------------+
| 6e0b14cd-f2d8-4f53-b978-68dd68086cdc | default | egress, IPv4                                                         |
|                                      |         | egress, IPv6                                                         |
|                                      |         | ingress, IPv4, remote_group_id: 6e0b14cd-f2d8-4f53-b978-68dd68086cdc |
|                                      |         | ingress, IPv6, remote_group_id: 6e0b14cd-f2d8-4f53-b978-68dd68086cdc |
+--------------------------------------+---------+----------------------------------------------------------------------+</codeblock></li>
              <li>Create two additional security group rules for your <codeph>default</codeph>
                security group to open up ports 22 and 79 for TCP ingress traffic. <p>Rule #1:</p>
                <codeblock>neutron security-group-rule-create --tenant-id &lt;dnsaas Project ID> --protocol TCP --remote-ip-prefix 0.0.0.0/0 --port-range-min 22 --port-range-max 22 &lt;default secgroup ID></codeblock>
                <p>Rule #2:</p>
                <codeblock>neutron security-group-rule-create --tenant-id &lt;dnsaas Project ID> --protocol TCP --remote-ip-prefix 0.0.0.0/0 --port-range-min 79 --port-range-max 79 &lt;default secgroup ID></codeblock></li>
            </ol></li>
          <li>Confirm that the rules were created successfully by listing out the rules again: <codeblock>neutron security-group-list --tenant-id &lt;project ID></codeblock>
            <p>Your output should look similar to this:</p>
            <codeblock>$ neutron security-group-list --tenant-id 5f33236dbfcb40b4a54662c22e2563c3
+--------------------------------------+---------+----------------------------------------------------------------------+
| id                                   | name    | security_group_rules                                                 |
+--------------------------------------+---------+----------------------------------------------------------------------+
| 6e0b14cd-f2d8-4f53-b978-68dd68086cdc | default | egress, IPv4                                                         |
|                                      |         | egress, IPv6                                                         |
|                                      |         | <b>ingress, IPv4, 22/tcp, remote_ip_prefix: 0.0.0.0/0</b>                   |
|                                      |         | <b>ingress, IPv4, 79/tcp, remote_ip_prefix: 0.0.0.0/0</b>                   |
|                                      |         | ingress, IPv4, remote_group_id: 6e0b14cd-f2d8-4f53-b978-68dd68086cdc |
|                                      |         | ingress, IPv6, remote_group_id: 6e0b14cd-f2d8-4f53-b978-68dd68086cdc |
+--------------------------------------+---------+----------------------------------------------------------------------+ </codeblock></li>
        </ol>
      </sectiondiv>
      <sectiondiv>
        <p><b>Booting the Deployer VM and Uploading the Deployer Tarball</b></p>
        <ol>
          <li>Boot the Deployer VM.
            <codeblock>$ nova boot --poll \
          --nic net-id=&lt;SVC ID Value> \   # SVC Network ID
          --image &lt;DNS Cloud Image ID>\   # DNSaaS Cloud Image ID
          --key-name dns-shared \         # Keypair Name
          --flavor m1.small \
          dnsaas-deployer        </codeblock></li>
          <li>Display the dnsaas-deployer. Make a note of the SVC-NET IP
            Address.<codeblock>$ nova show dnsaas-deployer</codeblock></li>
          <li>Copy the dnsaas image.
            <codeblock>$ scp -i dns_shared dnsaas-2.0.0-b.1-20151005T183829Z.tgz stack@&lt;SVC-NET IP Address>:~</codeblock></li>
        </ol></sectiondiv><sectiondiv>
        <b>Login and Initialize the Deployer VM</b>
        <ol>
          <li>Login to the deployer.
            <codeblock>$ ssh -i dns_shared stack@&lt;SVC-NET IP Address></codeblock> You will need
            to extract the dnsaas tar file and execute the dns-init.bash script.
            <codeblock>$ tar xf dnsaas-2.0.0-b.1-20151005T183829Z.tar
$ cd dnsaas-2.0.0-b.1/
$ ./dnsaas-init.bash 
[ OUTPUT TRIMMED ]

+ ssh-keygen -q -t rsa -f id_rsa
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 

[ OUTPUT TRIMMED ]

# Do not continue with the installation steps that appear here
# Ignore this next line.
To continue installation copy your cloud layout to: /home/stack/helion/my_cloud/definition      </codeblock></li>
        </ol></sectiondiv></section>

    <section id="PrepareDeployment">
      <title>Prepare the Deployment</title><sectiondiv>
        <b>Select an Example Deployment Model</b>
        <p><keyword keyref="kw-hos"/> DNSaaS has several example models that can be deployed. In the
          following example, the <i>powerdns</i> example deployment model is used.</p><note
          type="important">The <codeph>cp</codeph> command must be used exactly as shown - including
          the /* on the end of the example model
        path.</note><codeblock>$ cd ~/helion
$ cp -r examples/powerdns/* my_cloud/definition/
$ git add -A
$ git commit -a -m "Add DNSaaS Example Model" </codeblock>
      </sectiondiv><sectiondiv>
        <b>Customize the Example Deployment Model</b>
        <ol>
          <li>You will need to change directories to the my_cloud/definition directory and run nano
            to configure your DNS and NTP servers.
            <codeblock>$ cd my_cloud/definition/
$ nano cloudConfig.yml                                           </codeblock></li>
          <li>Run the ansible-playbook on the <keyword keyref="kw-hos"/>
            deployer.<codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts platform-pass-through.yml -e pass_through_key=""        </codeblock></li>
          <li> Copy the contents of the <codeph>platform-pass-through.yml</codeph> file as follows:<ul>
              <li>Copy <b>from</b>: &lt;<b>HOS</b> deployer&gt;:~/platform-pass-through.yml </li>
              <li>Copy <b>to</b>: &lt;<b>DNSaaS</b> deployer&gt;:
                ~/helion/my_cloud/definition/data/pass-through/platform-pass-through/platform-pass-through.yml</li>
            </ul>
          </li>
          <li>Commit the changes to git.
            <codeblock>$ git add -A
$ git commit -a -m "Save DNSaaS config file changes."
            </codeblock></li>
          <li>Run the Pre-Installation Playbook <p>Copy the ~/dnsaas.osrc file from the <keyword
                keyref="kw-hos"/> deployer. At the end of each playbook, ensure both "unreachable"
              and "failed" are zero.</p>
            <codeblock>$ source ~/dnsaas.osrc
$ cd ~/helion/hos/ansible/
$ ansible-playbook -i hosts/localhost hlm-pre-install.yml</codeblock>
          </li>
        </ol>
      </sectiondiv>
      <sectiondiv>
        <p><b>Create SSL Certificates</b></p>
        <p>If you want to install a self-signed certificate that meets the needs of <keyword
            keyref="kw-hos"/> and HPE Helion Development Platform, follow the steps outlined in the
          FQDN-based Certificate section. If you want to create an IP-address Certificate follow the
          steps in the IP-Address Certificate section.</p>
        <p>FQDN-based Certificate</p>
        <p>You will need a real or fictional domain name e.g. "your.domain.com" and it must match
          across the next 3 steps. </p>
        <ol>
          <li>Create a Certificate Signing Request (CSR) with a defined subject.
            <codeblock>cd ~
openssl req -nodes -days 365 -newkey rsa:2048 -keyout my-public-cert.key -out my-public-cert.csr -text \
    -subj '/C=US/O=Helion Test Certificate/CN=your.domain.com/emailAddress=test@example.org/'
            </codeblock></li>
          <li>Create a file containing v3 extensions Ensure that the DNS entry matches any CN entry
            above and provide your IP address. The IP address is what is used by HPE Helion
            Development Platform and the DNS is used by <keyword keyref="kw-hos"/>. <note>Update the
              "subjectAltName" value with the domain name subjectAltName=DNS:your.domain.com</note>
            <codeblock>$ cat &gt; v3_ext.cnf &lt;&lt; EOF
[ v3_req ]
subjectAltName=DNS:your.domain.com
EOF
            </codeblock></li>
          <li>Self-sign your certificate.
            <codeblock>$ openssl x509 -extfile v3_ext.cnf -extensions v3_req -in my-public-cert.csr -signkey my-public-cert.key -req -out my-public-cert.crt -text</codeblock></li>
          <li>Installing the Certificate. <note>If you are using a FQDN - Create or obtain a
              certificate to match the domain name you are going to use.</note>
            <ul>
              <li>Join the private and public keys into "my-cert-file" at the required location.
                <codeblock>$ cat my-public-cert.key my-public-cert.crt > ~/helion/my_cloud/config/tls/certs/my-public-cert</codeblock>
              </li>
              <li>Edit network_groups.yml, locate a line containing <codeph>name: extlb</codeph>.
                Add the following lines at the same indentation level as <codeph>name:
                  extlb</codeph>
                <codeblock>external-name: your.domain.name
cert-file: my-public-cert</codeblock></li>
              <li>Rename the "components" section of the extlb for a "tls-components" section,
                activating TLS on all external components.
                <codeblock>$ nano ~/helion/my_cloud/definition/data/network_groups.yml</codeblock></li>
              <li>Add changes to git.
                <codeblock>$ git add hos/ansible/roles/tls-frontend/files/my-public-cert  my_cloud/definition/data/network_groups.yml
$ git diff ^HEAD my_cloud/definition/data/network_groups.yml
# --- Output example ---
 - hostname: false
   hostname-suffix: ext
   load-balancers:
-  - components:
+  - tls-components:
     - default
     external-ip: 172.31.0.2
     name: extlb
+    cert-file: my-public-cert
+    external-name: your.domain.name
     provider: ip-cluster
     roles:
     - public
                    
$ git commit -m "Configure SSL certificate"
                  </codeblock>
              </li>
              <li>Commit changes to git.
                <codeblock>$ git commit -m "Configure SSL certificate"</codeblock>
              </li>
            </ul>
          </li>
        </ol>
        <p>IP-Address Certificate</p>
        <ol>
          <li>Identify the external IP Address.
            <codeblock>grep 'external-ip' ~/helion/my_cloud/definition/data/network_groups.yml</codeblock>
          </li>
          <li>Create a Certificate Signing Request (CSR) with a defined subject.
            <codeblock>stack@dnsaas-deployer:~$ cd ~
stack@dnsaas-deployer:~$ openssl req -nodes -days 365 -newkey rsa:2048 -keyout my-public-cert.key -out my-public-cert.csr -text \
  -subj '/C=US/O=Helion Test Certificate/CN=&lt;EXTERNAL_IP_ADDRESS&gt;/emailAddress=test@example.org/'</codeblock>
          </li>
          <li>Create a file containing v3 extensions Ensure that the DNS entry matches any CN entr
            above and provide your IP address. <note>The IP address must be the same in DNS: and IP:
              The IP address is what is used by HPE Helion Development Platform and the DNS is used
              by <keyword keyref="kw-hos"/>.</note>
            <codeblock>stack@dnsaas-deployer:~$ cat &gt; v3_ext.cnf &lt;&lt; EOF
[ v3_req ]
subjectAltName=DNS:&lt;EXTERNAL_IP_ADDRESS&gt;, IP:&lt;EXTERNAL_IP_ADDRESS&gt;
[ alt_names ]
IP.1 = &lt;EXTERNAL_IP_ADDRESS&gt;
DNS.1 = &lt;EXTERNAL_IP_ADDRESS&gt;
EOF</codeblock>
          </li>
          <li>Self-sign your certificate.
            <codeblock>$ openssl x509 -extfile v3_ext.cnf -extensions v3_req -in my-public-cert.csr -signkey my-public-cert.key -req -out my-public-cert.crt -text
            </codeblock>
          </li>
          <li>Installing the Certificate. <ul>
              <li>Join the private and public keys into "my-cert-file" at the required location.
                <codeblock>$ cat my-public-cert.key my-public-cert.crt > ~/helion/my_cloud/config/tls/certs/my-public-cert</codeblock>
              </li>
              <li>Edit network_groups.yml, locate a line containing <codeph>name: extlb</codeph>.
                Add the following lines at the same indentation level as <codeph>name:
                  extlb</codeph>
                <codeblock>cert-file: my-public-cert</codeblock>
              </li>
              <li>Rename the "components" section of the extlb for a "tls-components" section,
                activating TLS on all external components.
                <codeblock>$ nano ~/helion/my_cloud/definition/data/network_groups.yml</codeblock>
              </li>
              <li>Add changes to git.
                <codeblock>$ git add hos/ansible/roles/tls-frontend/files/my-public-cert  my_cloud/definition/data/network_groups.yml
$ git diff ^HEAD my_cloud/definition/data/network_groups.yml
# --- Output example ---
 - hostname: false
   hostname-suffix: ext
   load-balancers:
-  - components:
+  - tls-components:
     - default
     external-ip: 172.31.0.2
     name: extlb
+    cert-file: my-public-cert
     provider: ip-cluster
     roles:
     - public</codeblock>
              </li>
              <li>Commit changes to git.
                <codeblock>$ git commit -m "Configure SSL certificate"</codeblock>
              </li>
            </ul>
          </li>
        </ol>
      </sectiondiv>
      <sectiondiv>
        <p><b>Save Configured Deployment Model</b></p>
        <ol>
          <li>Add your changes to Git. <codeblock>$ cd ~/helion
$ git add -A
$ git commit -a -m "Configured Deployment Model"      
$ git status </codeblock>
            <note>Make sure that there are no other files which are not committed to the Git
              repository. If there are, begin troubleshooting.</note></li>
        </ol>
      </sectiondiv>
      <sectiondiv>
        <b>Run the Configuration Processor</b>
        <p>At the end of each playbook, ensure both "unreachable" and "failed" are
          zero.</p><note>When asked for a encryption key, simply leave the value blank, pressing
          enter 4 times to
        proceed.</note><codeblock>$ cd ~/helion/hos/ansible
$ ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock>
      </sectiondiv><b>Run the Ready Deployment Playbook</b>
      <p>At the end of each playbook, ensure both "unreachable" and "failed" are
      zero.</p><codeblock>$ ansible-playbook -i hosts/localhost ready-deployment.yml </codeblock>
    </section>

    <section id="PerformDeployment">
      <title>Perform the Deployment</title>
      <sectiondiv>
        <b>Run the Boot Infrastructure Playbook</b>
        <p>Once this is complete, all in-cloud infrastructure (VMs, Networks, Routers, Floating IPs
          etc) will have been created.</p><note>This step takes approximately 15 minutes to
          run.</note><codeblock>$ cd ~/scratch/ansible/next/hos/ansible

# Choose between single or multiple control plane.  You only need to execute one or the other, do not run both.          

# a) Multiple control plane nodes
$ ansible-playbook -i hosts/localhost hlm-boot-infra.yml
          
# b) Single control plane
$ ansible-playbook -i hosts/localhost hlm-boot-infra.yml -e neutron_router_ha=False</codeblock>
      </sectiondiv>
      <sectiondiv>
        <p id="RunSitePlay"><b>Run the Site Playbook</b></p>
        <note type="caution">Unlike all the previous ansible play's, the inventory file supplied to
          this play is <b>hosts/verb_hosts</b> and not <b>hosts/localhost</b>.</note>
        <note>This step take approximately 15 to 20 minutes to complete.</note>
        <codeblock>$ ansible-playbook -i hosts/verb_hosts site.yml</codeblock>
      </sectiondiv>
    </section>

    <section id="InitialConfiguration">
      <title>Initial Configuration</title>
      <sectiondiv>
        <p><b>Identify Name Server Public IPs</b></p>
        <p>To direct DNS traffic towards the DNSaaS managed nameservers, you must first identify the
          Floating IPs associated with each server. Each of the name servers (e.g.
          dnsaas-cp-ns0001-mgmt) will have two IPs listed for the DNSAAS_NET_EXT network, the second
          IP address (e.g. 172.31.0.10) is the Floating IP. It is recommended that you gather all
          IPs for the nameservers and before proceeding to the next step.</p>
        <ol>
          <li>Source the dnsaas.osrc file. <codeblock>$ source dnsaas.osrc</codeblock></li>
          <li>View server list.
            <codeblock>$ openstack server list
+--------------------------------------+-----------------------+--------+----------------------------------------------------------------------------------------+
| ID                                   | Name                  | Status | Networks                                                                               |
+--------------------------------------+-----------------------+--------+----------------------------------------------------------------------------------------+
| 1dca52f2-cc77-425b-9652-660d29dcf172 | dnsaas-cp-ns0003-mgmt | ACTIVE | DNSAAS_NET_EXT=172.16.1.15, 172.31.0.12; SVC=169.254.2.25; DNSAAS_NET_MGMT=172.16.0.15 |
| fbda0fb9-783e-4c77-ae61-fe58b2ccf23d | dnsaas-cp-ns0002-mgmt | ACTIVE | DNSAAS_NET_EXT=172.16.1.14, 172.31.0.11; SVC=169.254.2.24; DNSAAS_NET_MGMT=172.16.0.14 |
| c3775219-cc84-485d-a38c-423c0c3798bc | dnsaas-cp-ns0001-mgmt | ACTIVE | DNSAAS_NET_EXT=172.16.1.13, 172.31.0.10; SVC=169.254.2.23; DNSAAS_NET_MGMT=172.16.0.13 |
| 3fd8eac2-f952-4803-96f5-9299c635e18d | dnsaas-cp-c1-m3-mgmt  | ACTIVE | DNSAAS_NET_EXT=172.16.1.12; SVC=169.254.2.22; DNSAAS_NET_MGMT=172.16.0.12              |
| 469ebe36-de45-4335-be70-1fc329603023 | dnsaas-cp-c1-m2-mgmt  | ACTIVE | DNSAAS_NET_EXT=172.16.1.11; SVC=169.254.2.21; DNSAAS_NET_MGMT=172.16.0.11              |
| c2b485fa-233a-44f0-a024-b5f3c486779c | dnsaas-cp-c1-m1-mgmt  | ACTIVE | DNSAAS_NET_EXT=172.16.1.10; SVC=169.254.2.20; DNSAAS_NET_MGMT=172.16.0.10              |
| 4cea4050-b30a-4f64-b9a8-b85f3cd4856b | dnsaas-deployer       | ACTIVE | SVC=169.254.2.19                                                                       |
+--------------------------------------+-----------------------+--------+----------------------------------------------------------------------------------------+</codeblock></li>
        </ol>
      </sectiondiv>
      <sectiondiv>
        <p><b>Create Server Entries in Designate</b></p>
        <p>For each nameserver, choose a public FQDN. For example "ns1.mycloud.com", and create the
          server entry in Designate.</p>
        <ol>
          <li>Source the dnsaas.osrc file. <codeblock>$ source dnsaas.osrc</codeblock></li>
          <li>Create server 1.
            <codeblock>$ designate server-create --name ns1.mycloud.com.
+------------+--------------------------------------+
| Field      | Value                                |
+------------+--------------------------------------+
| id         | None                                 |
| created_at | 2015-11-02T16:56:05.000000           |
| updated_at | e93d76df-9660-45b4-83cc-c7ddec9f0add |
| name       | ns1.mycloud.com.                     |
+------------+--------------------------------------+</codeblock></li>
          <li>Create server 2.
            <codeblock>$ designate server-create --name ns2.mycloud.com.
+------------+--------------------------------------+
| Field      | Value                                |
+------------+--------------------------------------+
| id         | None                                 |
| created_at | 2015-11-02T16:56:09.000000           |
| updated_at | 7dbfd84e-bf00-4a33-ae72-24ed4c67efd4 |
| name       | ns2.mycloud.com.                     |
+------------+--------------------------------------+</codeblock></li>
          <li>Create server 3.
            <codeblock>$ designate server-create --name ns3.mycloud.com.
+------------+--------------------------------------+
| Field      | Value                                |
+------------+--------------------------------------+
| id         | None                                 |
| created_at | 2015-11-02T16:56:12.000000           |
| updated_at | 9da32483-7d96-4cb5-b2f8-8a1d1a0066e3 |
| name       | ns3.mycloud.com.                     |
+------------+--------------------------------------+</codeblock></li>
          <li>List servers.
            <codeblock>$ designate server-list
+--------------------------------------+------------------+
| id                                   | name             |
+--------------------------------------+------------------+
| e93d76df-9660-45b4-83cc-c7ddec9f0add | ns1.mycloud.com. |
| 7dbfd84e-bf00-4a33-ae72-24ed4c67efd4 | ns2.mycloud.com. |
| 9da32483-7d96-4cb5-b2f8-8a1d1a0066e3 | ns3.mycloud.com. |
+--------------------------------------+------------------+</codeblock></li>
        </ol>
      </sectiondiv>
      <sectiondiv>
        <p><b>Create the A records for each Name Server</b></p>
        <p>The following table of data is required - the table here is based on the example outputs
          above.</p>
        <p><table frame="all" rowsep="1" colsep="1" id="NSTable">
            <title/>
            <tgroup cols="3">
              <colspec colname="c1" colnum="1" colwidth="1.0*"/>
              <colspec colname="c2" colnum="2" colwidth="1.0*"/>
              <colspec colname="c3" colnum="3" colwidth="1.0*"/>
              <thead>
                <row>
                  <entry>NS Hostname</entry>
                  <entry>NS FQDN</entry>
                  <entry>NS Floating IP</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>dnsaas-cp-ns0001-mgmt</entry>
                  <entry>ns1.mycloud.com</entry>
                  <entry>169.254.2.23</entry>
                </row>
                <row>
                  <entry>dnsaas-cp-ns0002-mgmt</entry>
                  <entry>ns2.mycloud.com</entry>
                  <entry>169.254.2.24</entry>
                </row>
                <row>
                  <entry>dnsaas-cp-ns0003-mgmt</entry>
                  <entry>ns3.mycloud.com</entry>
                  <entry>169.254.2.2</entry>
                </row>
              </tbody>
            </tgroup>
          </table>For each name chosen, provide the external service the name and Floating IP
          address for each nameserver, or create the matching zone and records within Designate.</p>
      </sectiondiv>
    </section>

    <section id="MoreInformation">
      <title>More Information</title>
      <p>For more information on creating servers, domains and examples, see the <xref format="html"
          scope="external" href="http://docs.openstack.org/developer/designate/rest.html">OpenStack
          REST API documentation</xref>.</p>
    </section>
  </body>
</topic>
