<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" >
<topic xml:lang="en-us" id="topic3111">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Metering Service (Ceilometer) Overview</title>
  <abstract><shortdesc outputclass="hdphidden">Using the Metering service.</shortdesc></abstract>
  <body><!--not tested-->
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section id="newfunct">
      <title>New Metering Functionality in <keyword keyref="kw-hos-phrase"/></title>
      <ul>
        <li> The default meters and other items configured for the Ceilometer API can now be
          modified and additional meters can be added. It is highly recommended that customers test
          overall <keyword keyref="kw-hos"/> performance prior to deploying any Ceilometer
          modifications to ensure the addition of new notifications or polling events does not
          negatively affect overall system performance. </li>
        <li>Ceilometer Central Agent (pollster) is now called Polling Agent and is configured to support HA (Active-Active) </li>
        <li>Notification Agent has built-in HA (Active-Active) with support for pipeline
          transformers </li>
        <li>SWIFT Poll-based account level meters will be enabled by default with an hourly
          collection cycle.</li>
        <li>Integration with centralized monitoring(Monasca) and centralized logging </li>
        <li>Support for upgrade and reconfigure operations</li>
      </ul>
    </section>

    <section id="limitations">
      <title>Limitations</title>
      <ul>
        <li>The Ceilometer Post Meter API is disabled by default. </li>
        <li>The Ceilometer Events and Traits API is not supported and disabled by default.</li>
        <li>The Number of metadata attributes that can be extracted from resource_metadata has a maximum of 16. This is the number of fields in the metadata section of the <b>monasca_field_definitions.yaml</b> file for any service. It is also the number that is equal to fields in metadata.common and fields in metadata.&lt;service.meters&gt; sections. The total number of these fields cannot be more than 16.</li>
        <li>Several network-related attributes are accessible using a colon ":" but are returned as a period ".". For example, you can access a sample list using the following command:
<codeblock>ceilometer --debug sample-list -m network -q "resource_id=421d50a5-156e-4cb9-b404-d2ce5f32f18b;metadata.provider:network_type=flat"</codeblock> 
          However, in response you will see the following:
          <codeblock>likeprovider.network_type</codeblock> 
          instead of 
          <codeblock>provider:network_type</codeblock>
          <p>This limitation is known for the following attributes:</p> <codeblock>provider:network_type
            provider:physical_network
            provider:segmentation_id</codeblock></li>
        <li>Ceilometer Expirer is unsupported. Data retention expiration is now handled by Monasca with a default retention period of 45 days.</li>
        <li>Ceilometer Collector is unsupported.</li>
        <li>The Ceilometer Alarms API is disabled by default. <keyword keyref="kw-hos-phrase"/>
          provides an alternative operations monitoring service that will provide support for
          operations monitoring, alerts, and notifications use cases. </li>
      </ul>
    </section>

    <section><title>Meters</title>
      <p>The basic elements of information collected by the Ceilometer API are known as meters. A
        meter is a unique measurement of a particular OpenStack service resource usage and each
        OpenStack service defines what type of data is exposed for metering. </p>Each meter is
      defined by the supporting service and each has the following characteristics: <dl>
        <dlentry>
          <dt>Name</dt>
          <dd>the textual name of the meter</dd>
        </dlentry>
        <dlentry>
          <dt>Unit of measurement</dt>
          <dd>example: storage meters are defined in Gigabytes (GB) and network bandwidth is
            measured in Gigabits (Gb)</dd>
        </dlentry>
        <dlentry>
          <dt>Type, which can be cumulative, delta, or gauge</dt>
          <dd/>
        </dlentry>
        <dlentry>
          <dt>Cumulative</dt>
          <dd>increasing over time; for example: active instance hour</dd>
        </dlentry>
        <dlentry>
          <dt>Delta</dt>
          <dd>changing over time; for example: network bandwidth consumed between two different time
            periods</dd>
        </dlentry>
        <dlentry>
          <dt>Gauge</dt>
          <dd>a discrete value; for example: # of floating IP addresses or image uploads</dd>
        </dlentry>
      </dl> A meter is defined for every measurable resource. A meter can exist beyond the actual
      existence of a particular resource, such as an active instance, to provision long-cycle use
      cases such as billing. <p>The most common meter submission method is notifications. With this
        method, each service emits their respective meters on a periodic basis to a common
        notifications bus. </p>Ceilometer in turn pulls all of the events from the bus and saves the
      notifications in a Ceilometer-specific database. The period of time that the data is collected
      and saved is known as the ceilometer expiry and is configured during the Ceilometer
      installation. Each meter is collected from one or more samples (gathered from the messaging
      queue or polled by agents), which are represented by counter objects. Each counter has the
      following fields: <dl>
        <dlentry>
          <dt>counter_name</dt>
          <dd>The name. </dd>
        </dlentry>
        <dlentry>
          <dt>counter_type</dt>
          <dd>cumulative, gauge, or delta</dd>
        </dlentry>
        <dlentry>
          <dt>counter_volume</dt>
          <dd>The volume of data measured (CPU ticks, bytes transmitted, etc.). Not used for gauge
            counters. Set to a default value such as 1</dd>
        </dlentry>
        <dlentry>
          <dt>counter_unit</dt>
          <dd> The counter's unit of measurement. </dd>
        </dlentry>
        <dlentry>
          <dt>resource_id</dt>
          <dd>The identifier of the resource measured (UUID)</dd>
        </dlentry>
        <dlentry>
          <dt>project_id</dt>
          <dd>The project (tenant) ID the resource belongs to.</dd>
        </dlentry>
        <dlentry>
          <dt>user_id</dt>
          <dd>The ID of the user who owns the resource.</dd>
        </dlentry>
        <dlentry>
          <dt>resource_metadata</dt>
          <dd>Other data transmitted in the metering notification payload.</dd>
        </dlentry>
      </dl></section>


    <section><title>Samples</title> Samples are discrete collections of a particular meter or the
      actual usage data defined by a meter description. Each sample is time-stamped and includes a
      variety of data that varies per meter but usually includes the project ID and UserID of the
      entity that consumed the resource represented by the meter and sample. <p>In a typical
        deployment, the number of samples can be in the tens of thousands if not higher for a
        specific collection period depending on overall activity. </p>
      <p>Sample collection and data storage expiry settings are Ceilometer configuration options.
        Use cases that include collecting data for monthly billing cycles are usually stored over a
        period of 45 days and require a large, scalable, back-end database to support the large
        volume of samples generated by production OpenStack deployments.</p>
      <b>Example configuration:</b>
      <codeblock>[database]
metering_time_to_live=-1</codeblock>
      External applications such as a billing application must then collect all pertinent samples,
      sort, summarize, and combine with the results of other types of metered samples typically
      required for a complete billing record. <p>This function is known as aggregation and is
        external to the Ceilometer service.</p> Meter data, or samples, can also be collected
      directly from the service APIs by individual Ceilometer polling agents. These polling agents
      directly access service usage by calling the API of each service.<p>OpenStack services such as
        Swift and Ceph currently only provide metered data via this function and some of the other
        OpenStack services provide specific metrics only via a polling action.</p>
    </section>



    <section><title>Statistics, or metering the meters</title> The Ceilometer API also provides a
      set of statistics functions that can perform basic aggregation functions for meter specific
      samples over a time period-defined set of samples including: <dl>
        <dlentry>
          <dt>Count</dt>
          <dd>the number of discrete samples collected in each period</dd>
        </dlentry>
        <dlentry>
          <dt>Maximum</dt>
          <dd>the sample with the maximum value in a selected time period</dd>
        </dlentry>
        <dlentry>
          <dt>Minimum</dt>
          <dd>the sample with the minimum value in a selected time period</dd>
        </dlentry>
        <dlentry>
          <dt>Average</dt>
          <dd>the average value of a samples within a selected time period</dd>
        </dlentry>
        <dlentry>
          <dt>Sum</dt>
          <dd>the sum value of all samples within a selected time perio</dd>
        </dlentry>
      </dl></section>



    <section><title>Role Based Access Control (RBAC)</title> A user with the admin role can access
      all API functions across all projects by default. Ceilometer also supports the ability to
      assign who can access specific Ceilometer API functions by project and UserID. This assignment
      is configured via the Ceilometer policy file and enables the ability to specifically grant API
      functions to specific users for a specific project. </section>










    <!--
    <p>The HPE Helion OpenStack Metering service leverages the OpenStack Ceilometer service. A
      metering service takes specified measurements of both physical and virtual resources,
      including physical servers and network devices such as switches and firewalls. No matter what
      purpose the data is used for, this service provides a reliable, consistent method for data
      collection.</p>
    <section id="newIn20">
      <title>New for HPE Helion OpenStack 2.0</title>
      <p> Ceilometer configuration is now possible via a number of yaml files in the HPE Helion
        OpenStack implementation of the OpenStack Ceilometer metering service.</p>
    </section>

    <section id="installation">
      <title>Installation</title>
      <p>The metering service is automatically installed as part of the HPE Helion OpenStack
        installation process. It may be necessary to install the command-line interface (<xref
          href="http://docs.openstack.org/user-guide/content/install_clients.html" scope="external"
          format="html">CLI</xref>) separately to perform various administrative tasks.</p>
      <p>The initial default configuration enables a limited subset of all potential meters,
        collecting a few essential measurements from the Nova, Cinder, Glance, and Neutron services
        only. With these measurements, the Ceilometer API can begin collecting basic HPE Helion
        OpenStack usage and status information.</p>
      <p>Additional metrics collection for all of the HPE Helion OpenStack infrastructure services,
        as well as other application and platform services, are targeted for future HPE Helion
        OpenStack releases.</p>
    </section>
    <section id="working_with_ceilometer">
      <title>Working with Ceilometer</title>
      <p>All the Ceilometer processes have a unified configuration file: ceilometer.conf.</p>
      <p>Access to Ceilometer is through the command-line interface <xref
          href="http://docs.openstack.org/cli-reference/content/ceilometerclient_commands.html"
          scope="external" format="html">(CLI)</xref>, or the low-level <xref
          href="http://developer.openstack.org/api-ref-telemetry-v2.html" scope="external"
          format="html">REST API</xref>. A Ceilometer Horizon dashboard panel is not available at
        this time.</p>
    </section>-->
  </body>
</topic>
