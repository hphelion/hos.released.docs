<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" >
<topic xml:lang="en-us" id="topic3111">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Metering Service (Ceilometer) Overview</title>
  <abstract><shortdesc outputclass="hdphidden">Using the Metering service.</shortdesc></abstract>
  <body><!--not tested-->
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section id="ceilo_intro">
      <p>The Helion OpenStack Metering service is based on the OpenStack Ceilometer API. The Helion metering service collects and provides access to OpenStack usage data that can be used for billing reporting such as showback, and chargeback. The metering service can also be used for general usage reporting. As illustrated in the diagram below, the OpenStack Ceilometer API acts as the central collection and data access service to the meters provided  by all OpenStack services.</p>
      <p/>
      <p><image href="../../media/Ceilo_Architecture.png"/></p>
    </section>
    <lines>
      
    </lines>
   
    <section><title>Meters</title><p>The basic elements of information collected by the Ceilometer
        API are known as meters. A meter is a unique measurement of a particular OpenStack service
        resource usage and each OpenStack service defines what type of data is exposed for metering.
      </p>Each meter is defined by the supporting service and each has the following
      characteristics: <dl>
        <dlentry>
          <dt>Name</dt>
          <dd>the textual name of the meter</dd>
        </dlentry>
        <dlentry>
          <dt>Unit of measurement</dt>
          <dd>example: storage meters are defined in Gigabytes (GB) and network bandwidth is
            measured in Gigabits (Gb)</dd>
        </dlentry>
        <dlentry>
          <dt>Type</dt>
          <dd>can be cumulative, delta, or gauge</dd>
        </dlentry>
        <dlentry>
          <dt>Cumulative</dt>
          <dd>increasing over time; for example: active instance hour</dd>
        </dlentry>
        <dlentry>
          <dt>Delta</dt>
          <dd>changing over time; for example: network bandwidth consumed between two different time
            periods</dd>
        </dlentry>
        <dlentry>
          <dt>Gauge</dt>
          <dd>a discrete value; for example: # of floating IP addresses or image uploads</dd>
        </dlentry>
      </dl> A meter is defined for every measurable resource. A meter can exist beyond the actual
      existence of a particular resource, such as an active instance, to provision long-cycle use
      cases such as billing. <p>The most common meter submission method is notifications. With this
        method, each service emits their respective meters on a periodic basis to a common
        notifications bus. </p>Ceilometer in turn pulls all of the events from the bus and saves the
      notifications in a Ceilometer-specific database. The period of time that the data is collected
      and saved is known as the ceilometer expiry and is configured during the Ceilometer
      installation. Each meter is collected from one or more samples (gathered from the messaging
      queue or polled by agents), which are represented by counter objects. Each counter has the
      following fields: <dl>
        <dlentry>
          <dt>counter_name</dt>
          <dd>The name. </dd>
        </dlentry>
        <dlentry>
          <dt>counter_type</dt>
          <dd>cumulative, gauge, or delta</dd>
        </dlentry>
        <dlentry>
          <dt>counter_volume</dt>
          <dd>The volume of data measured (CPU ticks, bytes transmitted, etc.). Not used for gauge
            counters. Set to a default value such as 1</dd>
        </dlentry>
        <dlentry>
          <dt>counter_unit</dt>
          <dd> The counter's unit of measurement. </dd>
        </dlentry>
        <dlentry>
          <dt>resource_id</dt>
          <dd>The identifier of the resource measured (UUID)</dd>
        </dlentry>
        <dlentry>
          <dt>project_id</dt>
          <dd>The project (tenant) ID the resource belongs to.</dd>
        </dlentry>
        <dlentry>
          <dt>user_id</dt>
          <dd>The ID of the user who owns the resource.</dd>
        </dlentry>
        <dlentry>
          <dt>resource_metadata</dt>
          <dd>Other data transmitted in the metering notification payload.</dd>
        </dlentry>
      </dl></section>


    <section><title>Statistics, or metering the meters</title> The Ceilometer API also provides a
      set of statistics functions that can perform basic aggregation functions for meter specific
      samples over a time period-defined set of samples including: <dl>
        <dlentry>
          <dt>Count</dt>
          <dd>the number of discrete samples collected in each period</dd>
        </dlentry>
        <dlentry>
          <dt>Maximum</dt>
          <dd>the sample with the maximum value in a selected time period</dd>
        </dlentry>
        <dlentry>
          <dt>Minimum</dt>
          <dd>the sample with the minimum value in a selected time period</dd>
        </dlentry>
        <dlentry>
          <dt>Average</dt>
          <dd>the average value of a samples within a selected time period</dd>
        </dlentry>
        <dlentry>
          <dt>Sum</dt>
          <dd>the sum value of all samples within a selected time period</dd>
        </dlentry>
      </dl></section>

    <section><title>Role Based Access Control (RBAC)</title> A user with the admin role can access
      all API functions across all projects by default. Ceilometer also supports the ability to
      assign who can access specific Ceilometer API functions by project and UserID. This assignment
      is configured via the Ceilometer policy file and enables the ability to specifically grant API
      functions to specific users for a specific project. </section>










   
  </body>
</topic>
