<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" >
<topic xml:lang="en-us" id="ceilo_samples">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Metering Service Samples</title>
  <body><!--not tested-->
    <p conkeyref="HOS-conrefs/applies-to"/>
   

    <section> Samples are discrete collections of a particular meter or the actual usage data
      defined by a meter description. Each sample is time-stamped and includes a variety of data
      that varies per meter but usually includes the project ID and UserID of the entity that
      consumed the resource represented by the meter and sample. <p>In a typical deployment, the
        number of samples can be in the tens of thousands if not higher for a specific collection
        period depending on overall activity. </p><p>Sample collection and data storage expiry
        settings are Ceilometer configuration options. Use cases that include collecting data for
        monthly billing cycles are usually stored over a period of 45 days and require a large,
        scalable, back-end database to support the large volume of samples generated by production
        OpenStack deployments.</p>
      <b>Example configuration:</b>
      <codeblock>[database]
metering_time_to_live=-1</codeblock> External applications such as a
      billing application must then collect all pertinent samples, sort, summarize, and combine with
      the results of other types of metered samples typically required for a complete billing
      record. <p>This function is known as aggregation and is external to the Ceilometer
        service.</p> Meter data, or samples, can also be collected directly from the service APIs by
      individual Ceilometer polling agents. These polling agents directly access service usage by
      calling the API of each service.<p>OpenStack services such as Swift and Ceph currently only
        provide metered data via this function and some of the other OpenStack services provide
        specific metrics only via a polling action.</p>
    </section>
  </body>
</topic>
