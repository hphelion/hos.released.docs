<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="reconfig_metering">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Configure the Ceilometer Metering Service</title>
  <body><!--not tested-->
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section id="deploy">
    <p><keyword keyref="kw-hos-phrase"/> automatically deploys Ceilometer to use a common MySQL
        database. Ceilometer is deployed on the same control plane nodes along with other OpenStack
        services such as Keystone, Nova, Neutron, Glance, and Swift.</p>
   <p>You can configure the Metering Service in the following ways:</p>   
      <ul>
        <li><xref type="section" href="#reconfig_metering/Ceilo_StopStart">Restart the Polling Agent</xref></li>
        <li>Configure Metering Service Components</li>
        <li>Configure Apache2 for the Ceilometer API</li>
        <li>Enable Services for Messaging Notifications</li>
        <li>Configure Metering Service Notifications</li>
        <li>Run the Upgrade Playbook</li>
        <li>Reconfigure the Service</li>
      </ul>
 </section>
    
    <section id="Ceilo_StopStart">
      <title>Stop and Start the Polling Agent</title>
      <p>The Central Agent is responsible for coordinating the polling activity. It parses the
        <b>pipeline.yml</b> configuration file and identifies all the sources where data is collected. The sources are then evaluated and
        are translated to resources that a dedicated pollster can retrieve. The Polling Agent follows this process:</p>
      <ol>
        <li>At each identified interval, the <b>pipeline.yml</b> configuration file is parsed.</li>
        <li>The resource list is composed. </li> 
        <li>The pollster collects the data.</li>
           <li>The pollster sends data to the queue.</li>
      </ol>

      <p>Metering processes should normally be operating at all times. This need is addressed by the Upstart event engine which is designed to run on any Linux system. Upstart creates events, handles the consequences of those events, and starts and stops processes as required. Upstart will continually attempt to restart stopped processes even if the process was stopped manually. To stop or start the Polling Agent and avoid the conflict with Upstart, using the following steps.</p>
      <p><b>To restart the Polling Agent:</b></p>
      <ol>
        <li>To determine whether the process is running, run:
          <codeblock>sudo service ceilometer-agent-central status 
#SAMPLE OUTPUT: ceilometer-agent-central start/running, process 27989</codeblock></li>
        <li>To stop the process, run:
          <codeblock>sudo service ceilometer-agent-central stop</codeblock></li>
          <li>To start the process, run:
            <codeblock>sudo service ceilometer-agent-central start</codeblock></li>
      </ol>
    </section>
      <lines></lines>

    <section id="apache">
      <title>Configure Apache2 for the Ceilometer API</title> 
      <p>Reporting APIs provide access
        to the metering data stored in Ceilometer. These APIs are accessed by Horizon to provide
        basic usage data and information.<keyword keyref="kw-hos"/> uses Apache2 Web Server to
        provide the API access. </p><note type="attention">To improve API responsiveness you can
          increase the number of threads and processes in the Ceilometer configuration file. The
          Ceilometer API runs as an WSGI processes. Each process can have a certain amount of threads
          managing the filters and applications, which can comprise the processing pipeline.
        </note>
      <p>To configure Apache:</p>
      <ol>
        <li>Edit the Ceilometer configuration files.</li>
        <li>Reload and verify Apache2.</li>
      </ol>

      <p><b>Edit the Ceilometer Configuration Files</b></p>
      <p>To create a working file for Ceilometer with the correct settings:</p>
      <ol>
        <li>To add the configuration file to the correct folder, copy the following file:
          <codeblock>ceilometer.conf</codeblock> to the following directory:
          <codeblock>/etc/apache2/sites-available</codeblock></li>
        <li>To verify the settings, in a text editor, open the
          <codeph>ceilometer.conf</codeph> file.</li>
        <li>The ceilometer.conf file should have the following data. If it does not exist,
          add it to the file. <codeblock>Listen &lt;ipaddress>:8777 
&lt;VirtualHost *:8777>
    WSGIDaemonProcess ceilometer user=ceilometer group=ceilometer processes=4 threads=5 home=/opt/stack/venvs/openstack python-path=/opt/stack/venvs/openstack/lib/python2.7/site-packages
    WSGIScriptAlias / /opt/stack/venvs/openstack/lib/python2.7/site-packages/ceilometer/api/app.wsgi
    SetEnv APACHE_RUN_USER ceilometer
    SetEnv APACHE_RUN_GROUP ceilometer
    WSGIProcessGroup ceilometer
    ErrorLog /var/log/apache2/ceilometer_error.log
    LogLevel info
    CustomLog /var/log/apache2/ceilometer_access.log combined
    &lt;Directory />
        Require all granted
    &lt;/Directory>
&lt;/VirtualHost></codeblock><note>
  <p>The WSGIDaemon Recommended Settings are to use four processes running in
    parallel:</p>
  <codeblock>processes=4</codeblock>
  <p>Five threads for each process is also recommended: </p>
  <codeblock>threads=5</codeblock>
</note></li>
        <li>To add a softlink for the ceilometer.conf, run:
          <codeblock>ln -s /etc/apache2/sites-available/ceilometer.conf /etc/apache2/sites-enabled</codeblock></li>
      </ol>
      <lines/>
      <p><b>Reload and Verify Apache2</b></p>
      <p>For the changes to take effect, the Apache2 service needs to be reloaded. This
        ensures that all the configuration changes are saved and the service has applied
        them. The system administrator can change the configuration of processes and threads
        and experiment if alternative settings are necessary. </p>
      <p>Once the Apache2 service has been reloaded you can verify that the Ceilometer APIs
        are running and able to receive incoming traffic. The Ceilometer APIs are listening
        on port 8777.</p>
      <p>To reload and verify the Apache2 service:</p>
      <ol>
        <li>To reload Apache2, run: <codeblock>sudo service apache2 reload</codeblock></li>
        <li>To verify the service is running, run:
          <codeblock>ps -ef | grep apache
    #Sample output showing Apache2 with Ceilometer Running Instances:
    ceilome+ 31430 31427 10 16:29 ? 00:02:40 /usr/sbin/apache2 -k start
    ceilome+ 31431 31427 10 16:29 ? 00:02:41 /usr/sbin/apache2 -k start
    ceilome+ 31432 31427 10 16:29 ? 00:02:42 /usr/sbin/apache2 -k start
    ceilome+ 31433 31427 10 16:29 ? 00:02:43 /usr/sbin/apache2 -k start</codeblock><note
      type="attention">In a working environment, the list of entries in the output
      should match the number of processes in the configuration file. In the
      example configuration file, the recommended number of 4 is used, and the
      number of Running Instances is also 4.</note></li>
      </ol>
      <p>You can also verify that Apache2 is accepting incoming traffic using the following
        procedure:</p>
      <ol>
        <li>To verify traffic on port 8777, run:
          <codeblock>netstat -tulpn | grep 8777</codeblock></li>
        <li>Verify your output is similar to the following example:
          <codeblock>tcp6 0 0 :::8777 :::* LISTEN 8959/apache2</codeblock></li>
      </ol>
      <note type="attention">If Ceilometer fails to deploy: <ul>
        <li>check the proxy setting</li>
        <li>unset the https_proxy, for example:
          <codeblock>unset http_proxy HTTP_PROXY HTTPS_PROXY</codeblock></li>
      </ul></note>
    </section>
<lines>
</lines>
    <section id="metering_services">
      <title>Enable Services for Messaging Notifications</title>
      <p>After installation of Helion OpenStack, the following services are enabled by default to send notifications:</p>
<ul>
<li>Nova</li>
  <li>Cinder </li>
    <li>Glance </li>
      <li>Neutron</li>
        <li>Swift</li>
</ul>
<p>The list of meters for these services are specified in the Notification Agent or Central Agent's
        pipeline configuration file. </p>
      <p>For steps on how to edit the pipeline configuration files, see: <xref href="metering_notifications.dita#notifications/list">Editing the List of Meters</xref></p>
    </section>

    <section id="upgrade">
      <title>Run the Upgrade Playbook</title> 
      <p>Follow Standard Service upgrade mechanism available in the
      lifecycle manager distribution. For Ceilometer, the playbook included with <keyword keyref="kw-hos"/>
        is ceilometer-upgrade.yml </p>
    </section>


    <section id="reconfig"><title>Reconfigure the Service</title> 
      <p>Make changes in the Ceilometer available
      configuration files on lifecycle manager machine in
        <codeph>/home/stack/helion/my_cloud/config/ceilometer/</codeph></p>
      <p>Make changes in the target configuration file (ie.,
        pipeline-agent-notification.yaml.j2)</p><codeblock>cd /home/stack/helion
git add -A
git commit -m "My config"</codeblock>
      Run the configuration processor:
      <codeblock>cd /home/stack/helion/hos/ansible/
ansible-playbook -i hosts/localhost config-processor-run.yml -e encrypt="" -e rekey=""</codeblock>
      Run ready-deployment:
      <codeblock>ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock> Run
      ceilometer-reconfigure.yml:
      <codeblock>cd /home/stack/scratch/ansible/next/hos/ansible/
ansible-playbook -i hosts/verb_hosts ceilometer-reconfigure.yml</codeblock>
    </section>
  </body>
</topic>
