<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="DatabaseArchitecture ">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Database Service Architecture</title><abstract><shortdesc outputclass="hpdhidden">Provides lifecycle services for both single instance and clustered databases.</shortdesc></abstract>
<body>
  <section id="expandCollapse">
    <sectiondiv outputclass="expandall">Expand All Sections</sectiondiv>
    <sectiondiv outputclass="collapseall">Collapse All Sections</sectiondiv>
  </section>
    <section><title outputclass="headerH">Introduction</title>
      <sectiondiv outputclass="insideSection">
    <p>The database service provides lifecycle services for both single instance and clustered
        databases for Percona MySQL, MongoDB, Redis, and Vertica. Lifecycle services include
        provisioning, configuration, patching, instance backups, and restores that can be
        administered from either a command-line interface, RESTful APIs, or the Horizon
        dashboard.</p>
    <ul>
      <li>An implementation of <xref href="https://wiki.openstack.org/wiki/Trove" format="html"
        scope="external">OpenStack Trove</xref>, the <xref href="database-instance.dita#DatabaseService">Database
          Service</xref> provides scalable and reliable database provisioning functionality for both relational and non-relational databases.
        Supported datastores and their versions are: 
      
      <ul>
        <li>Percona MySql 5.5</li>
        <li>MongoDB 3.0</li>
        <li>Redis 3.0</li>
        <li>Vertica Preview (Vertica Community Edition 7.1.2)</li>
      </ul>
      </li>
      <li>The Database Service provides lifecycle management of database instances and clusters via a control plane, and automates common administration 
        tasks, including the following:
        <ul>
          <li>Replication</li>
          <li>Full and incremental backups</li>
          <li>Restore</li>
          <li>Database and user management</li>
          <li>Scaling</li></ul>
      </li>
      <li>Users can consume the service via the REST API, CLI, or HPE Helion OpenStack console.</li>
    </ul>
      </sectiondiv>
  </section>
  <section><title outputclass="headerH">Deployed View</title>
    <sectiondiv outputclass="insideSection">
  
    <image placement="break" href="../media/hos.docs/database_architecture_services.png" />
    <p>The Database Service is deployed as an In-Cloud service and is composed of the following components:</p>
    <ul>
      <li>A control plane, which is a set of services deployed on fifteen virtual machines (VMs) that manage and run the Database Service in a three availability zone (AZ) configuration. 
        These services are the API server, message bus (RabbitMQ), task manager, conductor, and Trove control plane database (Percona MySQL cluster).</li>
      <li>Customer Database Service instances and clusters which host the guest agent and datastore binary itself (for MySQL, MongoDB, Redis, and Vertica-Preview).  The figure above shows how 
        Database as a Service can manage multiple clusters belonging to multiple users.  Each database server consists of a VM and OpenStack Block Storage for the database files.  Users only 
        have access to the database via the datastore protocol. </li>
    </ul>
    <p>If HPE Helion OpenStack is configured to use multiple AZs, the Database Service will install across all zones using intelligent orchestration and data-level clustering. 
    </p>
    </sectiondiv>
  </section>
  <section><title outputclass="headerH">Components</title>
    <sectiondiv outputclass="insideSection">
  
    
    <p>A description of each component in the Database Service is provided below.</p>
    <table>
      <tgroup cols="2">
        <colspec colname="component" />
        <colspec colname="function" />
        <thead>
          <row>
            <entry colname="component">Component</entry>
            <entry colname="function">Function</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>API</entry>
            <entry>A REST API that provides access to common provisioning and administration tasks such as creating a database instance, resizing, adding users, managing backups, changing the instance configuration, and creating replicas.  
              The API communicates with the Task Manager and the Guest Agent. It accepts requests, converts them into messages, validates the request, and then forwards them to the Task Manager or Guest Agent. The API provides a single 
              way for users and developers to interact with individual database management systems in a consistent manner without having to be experts in a particular database technology.</entry>
          </row>
          <row>
            <entry>Message Bus</entry>
            <entry>Manages interaction between API endpoints, the Task Manager and the Guest Agent. The Message Bus is implemented using RabbitMQ version 3.4.1.</entry>
          </row>
          <row>
            <entry>Task Manager</entry>
            <entry>Provisions instances, manages the lifecycle, performance and operations of the database instance. The Task Manager receives messages from the API server, responds with consent and begins the task. It initiates complex 
              process flows within the system and manages them as they execute across multiple, distributed systems.</entry>
          </row>
          <row>
            <entry>Guest Agent</entry>
            <entry>Responsible for managing and performing operations on the database instance. It is a service that runs within the guest instance, or each clustered database node.  The Guest Agent brings the database online and also 
              sends heartbeat messages to the API via the Conductor. There is a Guest Agent for each datastore (database technology) implementation that is able to perform specific operations for that datastore.</entry>
          </row>
          <row>
            <entry>Conductor</entry>
            <entry>Responsible for receiving messages from guest instances to update information on the host.</entry>
          </row>
          <row>
            <entry>Database</entry>
            <entry>Provides persistent storage for maintaining the state of the service. It uses the Percona multi-master MySQL 5.5 distribution.</entry>
          </row>
        </tbody>
      </tgroup>
      
    </table>
    </sectiondiv>
  </section>
  <section><title outputclass="headerH">Deployment</title>
    <sectiondiv outputclass="insideSection">
  
    <p>The Database Service uses HPE Helion Orchestration (OpenStack Heat) to orchestrate its
        deployment. </p>
    
    <p>As a best practice, HP recommends creating three availability zones. The Helion OpenStack
        post install steps for setting up host aggregates to create AZs are <xref
          href="../installation/install_database.dita#topic_vsf_hnh_ts/install-database"
          >documented</xref> and should be carried out before deploying the HP Helion Platform services.
    </p>
    
    <p>
      During Database Service installation, ensure the “Enable HA” option is selected to have the database control plane distributed across all three availability zones for high availability (HA). 
      This will make the database service resilient to failures in any one AZ. If only a single AZ exists, “Enable HA” option can still be selected, however all fifteen service control plane VMs will be deployed in the same AZ .
      
    </p>
    <p>By default, for a deployment on 3 AZs, the control plane instances of the Database Service will use fifteen medium-flavor VMs as illustrated above. The size of the control plane and of the selected VM flavor are not 
      configurable in this release.
    </p>
    
    <p>Once the Database Service is running, the individual VMs in the control plane forward their logs to the Helion Centralized Logging Service via the service network.
    </p>
    
    
    <!--
    <p>When a user requests a database via the Database Service API, CLI, or horizon console, they provide the amount of OpenStack Block storage required for the database and VM instance flavor to be used.</p>
    <p>When using a MySQL database, users can easily create MySQL slave databases of an existing MySQL database by selecting the ‘Use replica’ option when creating a new database.  The Database Service will configure this new database 
      to start receiving replication data from the MySQL master specified.</p>
    <p>Once a new database becomes active users connect to it via the MySQL command line client, MySQL tools, or MySQL libraries used by applications.  Users can also assign a floating IP address to the database and update the security 
      group to allow for connection from outside the external-network.</p>-->
    
    </sectiondiv>
  </section>
  <section><title outputclass="headerH">Network</title>
    <sectiondiv outputclass="insideSection">
      <p>The following picture shows how the Database Service connects to the pre-existing HOS
          Service, Management, and External networks. It also shows the networks that are created
          when the Database Service is installed. For simplicity, the entire control plane across
          Availability Zones is shown as a single set of control plane components.<image
            placement="break" href="../media/hos.docs/archref_db_network.png" id="image_lhk_rrh_y5"
          /></p>
    <p>The following networks are created when the Database Service is installed: </p>
    <ul>
      <li><b>DBaaS MgmtNetwork</b>: Used for control plane nodes to communicate with one another.</li>
      <li><b>Guest Network</b>: Used for Trove Agents to communicate back to the RabbitMQ cluster on the control plane.</li>
    </ul>
    </sectiondiv>
  </section>

    <section><title outputclass="headerH">Routers</title>
      <sectiondiv outputclass="insideSection">
    
    <p>The following routers are created when the Database Service is installed:</p>
    <ul>
      <li>A router joining the DBaaS guest network to Ext Network, enabling databases to back themselves up using the Swift API.</li>
      <li>A router joining the DBaaS management network to Ext Network, enabling the control plane to access OpenStack APIs.</li>
    </ul>
      </sectiondiv>
  </section>
  <section><title outputclass="headerH">Security Requirements</title>
    <sectiondiv outputclass="insideSection">
  
    <p>The following port restrictions between networks are required for the DBaaS Service to function correctly. These are implemented by Security Groups.</p>
    <table>
      <tgroup cols="4">
        <colspec colname="source" />
        <colspec colname="destination" />
        <colspec colname="ports" />
        <colspec colname="description" />
        <thead>
          <row>
            <entry colname="source">Source</entry>
            <entry colname="destination">Destination</entry>
            <entry colname="ports">Ports (TCP)</entry>
            <entry colname="description">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>DBaaS Management Network</entry>
            <entry>External Network</entry>
            <entry><lines>8000 (heat)
8774 (nova)
9696 (neutron)
9292 (glance)
8776 (cinder)
8004 (heat)
8080 (swift)
5000 (keystone)</lines></entry>
            <entry>Access to OpenStack APIs</entry>
          </row>
          <row>
            <entry>External Network</entry>
            <entry>HOS Management Network</entry>
            <entry><lines>8000 (heat)
8774 (nova)
9696 (neutron)
9292 (glance)
8776 (cinder)
8004 (heat)
8080 (swift)
5000 (keystone)</lines></entry>
            <entry>Access to OpenStack APIs</entry>
          </row>
          <row>
            <entry>External Network</entry>
            <entry>HOS Management Network</entry>
            <entry>8779</entry>
            <entry>Access to  HAProxy that provides Trove API </entry>
          </row>
          <row>
            <entry>HOS Management Network</entry>
            <entry>Service Network</entry>
            <entry>8779</entry>
            <entry>Access from HAProxy to Trove API</entry>
          </row>
          <row>
            <entry>Guest Network</entry>
            <entry>External Network</entry>
            <entry>8080 (swift)</entry>
            <entry>Guest database access to Swift API</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    </sectiondiv>
  </section>
  <section><title outputclass="headerH">Security Groups</title>
    <sectiondiv outputclass="insideSection">
  
    <p>The Security groups listed below enforce the security requirements defined above. They are created during the installation process.  There are no egress restrictions.</p>
    <table>
      <tgroup cols="6">
        <colspec colname="group" />
        <colspec colname="ethertype" />
        <colspec colname="ipprotocol" />
        <colspec colname="portrange" />
        <colspec colname="remoteipprefix" />
        <colspec colname="remotesecuritygroup" />
        <thead>
          <row>
            <entry colname="group">Group</entry>
            <entry colname="ethertype">Ether Type</entry>
            <entry colname="ipprotocol">IP Protocol</entry>
            <entry colname="portrange">Port Range</entry>
            <entry colname="remoteipprefix">Remote IP Prefix</entry>
            <entry colname="remotesecuritygroup">Remote Security Group</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry morerows="1">trove-trove_api</entry>
            <entry morerows="1">IPv4</entry>
            <entry>TCP</entry>
            <entry>22</entry>
            <entry>0.0.0.0/0</entry>
            <entry morerows="1">-</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>8779</entry>
            <entry>0.0.0.0/0</entry>
          </row>
          <row>
            <entry morerows="2">trove-trove_check_mk</entry>
            <entry morerows="2">IPv4</entry>
            <entry>TCP</entry>
            <entry>22</entry>
            <entry>0.0.0.0/0</entry>
            <entry morerows="2">-</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>8779</entry>
            <entry>0.0.0.0/0</entry>
          </row>
          <row>
            <entry>ICMP</entry>
            <entry>Any</entry>
            <entry>-</entry>
          </row>
          <row>
            <entry>trove-trove_conductor</entry>
            <entry>IPv4</entry>
            <entry>ICMP</entry>
            <entry>Any</entry>
            <entry>-</entry>
            <entry>trove-trove_api</entry>
          </row>
          <row>
            <entry morerows="8">trove-database</entry>
            <entry morerows="8">IPv4</entry>
            <entry>ICMP</entry>
            <entry>Any</entry>
            <entry>-</entry>
            <entry>trove-trove_tm</entry>
          </row>
          <row>
            <entry>ICMP</entry>
            <entry>Any</entry>
            <entry>-</entry>
            <entry>trove-trove_api</entry>
          </row>
          <row>
            <entry>ICMP</entry>
            <entry>Any</entry>
            <entry>-</entry>
            <entry>trove-trove_conductor</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>3306</entry>
            <entry>-</entry>
            <entry>trove-trove_tm</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>3306</entry>
            <entry>-</entry>
            <entry>trove-trove_api</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>3306</entry>
            <entry>-</entry>
            <entry>trove-trove_conductor</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>3306</entry>
            <entry>-</entry>
            <entry>trove-database</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>4444</entry>
            <entry>-</entry>
            <entry>trove-database</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>4567-4568</entry>
            <entry>-</entry>
            <entry>trove-database</entry>
          </row>
          <row>
            <entry morerows="12">trove-trove_rmq</entry>
            <entry morerows="12">IPv4</entry>
            <entry>ICMP</entry>
            <entry>Any</entry>
            <entry>-</entry>
            <entry>trove-trove_conductor</entry>
          </row>
          <row>
            <entry>ICMP</entry>
            <entry>Any</entry>
            <entry>-</entry>
            <entry>trove-trove_tm</entry>
          </row>
          <row>
            <entry>ICMP</entry>
            <entry>Any</entry>
            <entry>-</entry>
            <entry>trove-trove_api</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>4369</entry>
            <entry>-</entry>
            <entry>trove-trove_rmq</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>5535</entry>
            <entry>-</entry>
            <entry>trove-trove_rmq</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>5672</entry>
            <entry>-</entry>
            <entry>trove-trove_conductor</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>5672</entry>
            <entry>-</entry>
            <entry>trove-trove_tm</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>5672</entry>
            <entry>trove mgmt network</entry>
            <entry>-</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>5672</entry>
            <entry>trove guest network</entry>
            <entry>-</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>5672</entry>
            <entry>0.0.0.0/0</entry>
            <entry>trove-trove_api</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>15672</entry>
            <entry>0.0.0.0/0</entry>
            <entry>-</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>25672</entry>
            <entry>0.0.0.0/0</entry>
            <entry>-</entry>
          </row>
          <row>
            <entry>TCP</entry>
            <entry>61000</entry>
            <entry>-</entry>
            <entry>trove-trove_rmq</entry>
          </row>
          <row>
            <entry>trove-trove_tm</entry>
            <entry>IPv4</entry>
            <entry>ICMP</entry>
            <entry>Any</entry>
            <entry>-</entry>
            <entry>trove-trove_api</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    </sectiondiv>
  </section>
  
</body>
</topic>
