<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="en-us" id="database_operations_guide">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Database Service Operations Guide</title><abstract><shortdesc outputclass="hdphidden">Documentation to help operate the Database service.</shortdesc></abstract>
   <body>
     <section id="expandCollapse">
       <sectiondiv outputclass="expandall">Expand All Sections</sectiondiv>
       <sectiondiv outputclass="collapseall">Collapse All Sections</sectiondiv>
     </section>
       <section>
         <p>When HA is enabled, the database service will distribute its multiple database instances across the compute hosts in those zones, ensuring that a single hardware failure in one availability zone (AZ) does not impact more than one database instance. </p>
         
         <p>Other users who request virtual machines (VMs), but do not specify a particular AZ, may have their VM instances scheduled from those AZs assigned for use by the database service.  This means that other VMs can consume compute resources from those 
             AZs used by the database service, and so the administrator will need to ensure that sufficient compute resources are available for new database service requests.</p>
         
         <p>If a compute host is not associated with an AZ, the Database Service will not be able to provision a database instance to it. As a result, the Database Service may run out of capacity even though there are compute 
             hosts with free capacity in the Helion OpenStack instance. </p>
           
         <p>When a user requests a database via the Database Service API, CLI, or horizon console, they provide the amount of OpenStack Block storage required for the database and VM instance flavor to be used.	</p>
           
         <p>Once a new database becomes active, users connect to it via the datastore command-line client, datastore tools, or libraries used by applications.  Users can also assign a floating IP address to the database, and update the security group 
             to allow for connection from outside the external network.</p>
         </section>
     <section><title outputclass="headerH">Data Durability</title>
       <sectiondiv outputclass="insideSection">

           <p>The Database service ensures database content is protected through its integration with the
               HPE Helion OpenStack Block Storage. HPE Helion Openstack offers two cinder block storage
               plugin choices that provide Highly Available RAID protected Storage volumes for use by the
               user databases:</p>
           <ul>
               <li>HPE 3PAR storage arrays</li>
               <li>StoreVirtual VSA software running on ProLiant servers that creates a virtual array using the ProLiant server internal disks.</li>
             </ul>
           <p>For more information on HPE Helion OpenStack Cinder block storage and on capacity estimation
               guidelines, see <xref
                   href="http://docs.hpcloud.com/#commercial/GA1/1.1commercial.-vsa-overview.html"
                   format="html" scope="external">Cinder Block Storage Using HPE StoreVirtual VSA</xref>.</p>
         <ul>
           <li>
             <p>For documentation on backup/restore capability for single-instance client databases,
              see <xref href="database-backup.dita#topic_backup_database">Back up a Database</xref>.
              HPE Helion Development Platform (HDP) does not provide a tool or automation for
              establishing a backup policy and schedule. You can either use existing solutions to
              configure your desired policy, or use “cron” type tools. Depending on how accessible
              your client databases are from outside of a Helion OpenStack environment, you might
              initiate backups from external cloud providers (such as AWS), or copy backup data to
              outside the boundaries of the Helion OpenStack. HDP does not provide a mechanism for
              that within the product. There is also database replication functionality for single
              instances, but this is not applicable for clustered databases (such as MySQL
              clusters).</p>
             
           </li>
           <li><p>For clustered client databases, depending on datastore type (MySQL, MongoDB, Redis, or Vertica Preview), use the respective data backup tools that are available externally. 
             Examples: mysqldump, innobackupex, mongodump.  Also, make sure you are considering whether to encrypt the data as you back it up. It is recommended that you copy and store the backup 
             in an external location or on different AZs.
           </p>
             <p>A client database will show in SHUTDOWN state in case the datastore process for it is down. This will be shown in “trove list --include-cluster”, or “trove show” command for a specific database. 
               You can implement an automated job to detect and alert based on the state of databases.
             </p>
             <p>In addition to the database state health check, you also need to monitor the availability of the load balancer for clustered databases, by implementing an automated tool to poll the 
               state of the load balancer.
             </p>
             <p>For MongoDB clusters, you also need to check the status and availability of the MongoDB cluster query router.</p>
             <p>In a DR scenario impacting the client databases, first identify the cause of the outage: whether it is load balancer or network related, or database cluster outage. In case of a load balancer issue, recover the load balancer.
             </p></li>
           <li>In case of database cluster outage, do the following:
             <ol>
               <li>Create a new database cluster</li>
               <li>Use the same data dump tool to perform a restore of the backed up data to the new database cluster</li>
               <li>Ensure your data is restored correctly and begin using the new clustered database</li>
             </ol>
           </li>
           <li><p>For documentation for High Availability (HA) capability for Trove Control Plane VMs, see <xref
                href="database-architecture.dita#DatabaseArchitecture">Database Service
                Architecture</xref>. </p>
             <p>For HA, the number of AZs and hardware redundancy determines your HA capability. In a single rack, all AZs will share the same power/network. The Trove Control Plane database is a 
               MySQL Galera cluster (active/active multi-master sync config). It can tolerate down to one node staying up (on a 3 AZ config, 2 node failures). In addition, control plane database is 
               automatically backed up to Swift every hour.
             </p></li>
           <li>In a Disaster Recover (DR) scenerio, if the DBaaS control plane goes down, you need
            to redeploy DBaaS and restore the control plane database using data from the Swift
            backup. You can find the Swift backup file as follows: <ol>
              <li>Swift container name: <b>backup_container</b></li>
              <li>Swift backup file name format:
                  <b>&lt;hostname&gt;-&lt;date&gt;-backup-percona</b><p>where &lt;hostname&gt; is
                  the name of the DBaaS control plane database host. Run <codeph>nova list</codeph>
                  to get the database host name that resembles <codeph>trove-db-....</codeph>
                  prefix. </p></li>
            </ol>
          </li>
         </ul>
       </sectiondiv>
         </section>

   </body>
  </topic>
